/**
 * Async glob
 * @function aglob
 * @param {string|string[]} patterns - Pattern
 * @param {Object} [options] - Optional settings
 * @returns {Promise}
 */
'use strict';

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var co = require('co');
var glob = require('glob');

/** @lends aglob */
function aglob(patterns) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  return co(_regenerator2.default.mark(function _callee() {
    var _this = this;

    var results, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

    return _regenerator2.default.wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            results = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context2.prev = 4;
            _loop = _regenerator2.default.mark(function _loop() {
              var pattern, filenames;
              return _regenerator2.default.wrap(function _loop$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      pattern = _step.value;
                      _context.next = 3;
                      return new _promise2.default(function (resolve, reject) {
                        return glob(pattern, options, function (err, filenames) {
                          return err ? reject(err) : resolve(filenames);
                        });
                      });

                    case 3:
                      filenames = _context.sent;

                      results = results.concat(filenames);

                    case 5:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _loop, _this);
            });
            _iterator = (0, _getIterator3.default)([].concat(patterns || []));

          case 7:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context2.next = 12;
              break;
            }

            return _context2.delegateYield(_loop(), 't0', 9);

          case 9:
            _iteratorNormalCompletion = true;
            _context2.next = 7;
            break;

          case 12:
            _context2.next = 18;
            break;

          case 14:
            _context2.prev = 14;
            _context2.t1 = _context2['catch'](4);
            _didIteratorError = true;
            _iteratorError = _context2.t1;

          case 18:
            _context2.prev = 18;
            _context2.prev = 19;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 21:
            _context2.prev = 21;

            if (!_didIteratorError) {
              _context2.next = 24;
              break;
            }

            throw _iteratorError;

          case 24:
            return _context2.finish(21);

          case 25:
            return _context2.finish(18);

          case 26:
            return _context2.abrupt('return', results);

          case 27:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee, this, [[4, 14, 18, 26], [19,, 21, 25]]);
  }));
}

(0, _assign2.default)(aglob, {
  sync: function sync(patterns, options) {
    return [].concat(patterns || []).reduce(function (result, pattern) {
      return result.concat(glob.sync(pattern, options));
    }, []);
  }
});

module.exports = aglob;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFnbG9iLmpzIl0sIm5hbWVzIjpbImNvIiwicmVxdWlyZSIsImdsb2IiLCJhZ2xvYiIsInBhdHRlcm5zIiwib3B0aW9ucyIsInJlc3VsdHMiLCJwYXR0ZXJuIiwicmVzb2x2ZSIsInJlamVjdCIsImVyciIsImZpbGVuYW1lcyIsImNvbmNhdCIsInN5bmMiLCJyZWR1Y2UiLCJyZXN1bHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLEtBQUtDLFFBQVEsSUFBUixDQUFYO0FBQ0EsSUFBTUMsT0FBT0QsUUFBUSxNQUFSLENBQWI7O0FBRUE7QUFDQSxTQUFTRSxLQUFULENBQWdCQyxRQUFoQixFQUF3QztBQUFBLE1BQWRDLE9BQWMseURBQUosRUFBSTs7QUFDdEMsU0FBT0wsOEJBQUc7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNKTSxtQkFESSxHQUNNLEVBRE47QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVDQyw2QkFGRDtBQUFBO0FBQUEsNkJBR2dCLHNCQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVjtBQUFBLCtCQUNoQ1AsS0FBS0ssT0FBTCxFQUFjRixPQUFkLEVBQXVCLFVBQUNLLEdBQUQsRUFBTUMsU0FBTjtBQUFBLGlDQUNyQkQsTUFBTUQsT0FBT0MsR0FBUCxDQUFOLEdBQW9CRixRQUFRRyxTQUFSLENBREM7QUFBQSx5QkFBdkIsQ0FEZ0M7QUFBQSx1QkFBWixDQUhoQjs7QUFBQTtBQUdGQSwrQkFIRTs7QUFRTkwsZ0NBQVVBLFFBQVFNLE1BQVIsQ0FBZUQsU0FBZixDQUFWOztBQVJNO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsbURBRVksR0FBR0MsTUFBSCxDQUFVUixZQUFZLEVBQXRCLENBRlo7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUEsOENBVURFLE9BVkM7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBSCxFQUFQO0FBWUQ7O0FBRUQsc0JBQWNILEtBQWQsRUFBcUI7QUFDbkJVLE1BRG1CLGdCQUNiVCxRQURhLEVBQ0hDLE9BREcsRUFDTTtBQUN2QixXQUFPLEdBQUdPLE1BQUgsQ0FBVVIsWUFBWSxFQUF0QixFQUNKVSxNQURJLENBQ0csVUFBQ0MsTUFBRCxFQUFTUixPQUFUO0FBQUEsYUFBcUJRLE9BQU9ILE1BQVAsQ0FBY1YsS0FBS1csSUFBTCxDQUFVTixPQUFWLEVBQW1CRixPQUFuQixDQUFkLENBQXJCO0FBQUEsS0FESCxFQUNvRSxFQURwRSxDQUFQO0FBRUQ7QUFKa0IsQ0FBckI7O0FBT0FXLE9BQU9DLE9BQVAsR0FBaUJkLEtBQWpCIiwiZmlsZSI6ImFnbG9iLmpzIiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQXN5bmMgZ2xvYlxuICogQGZ1bmN0aW9uIGFnbG9iXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcGF0dGVybnMgLSBQYXR0ZXJuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9uYWwgc2V0dGluZ3NcbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICovXG4ndXNlIHN0cmljdCdcblxuY29uc3QgY28gPSByZXF1aXJlKCdjbycpXG5jb25zdCBnbG9iID0gcmVxdWlyZSgnZ2xvYicpXG5cbi8qKiBAbGVuZHMgYWdsb2IgKi9cbmZ1bmN0aW9uIGFnbG9iIChwYXR0ZXJucywgb3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBjbyhmdW5jdGlvbiAqICgpIHtcbiAgICBsZXQgcmVzdWx0cyA9IFtdXG4gICAgZm9yIChsZXQgcGF0dGVybiBvZiBbXS5jb25jYXQocGF0dGVybnMgfHwgW10pKSB7XG4gICAgICBsZXQgZmlsZW5hbWVzID0geWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICAgICAgZ2xvYihwYXR0ZXJuLCBvcHRpb25zLCAoZXJyLCBmaWxlbmFtZXMpID0+XG4gICAgICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKGZpbGVuYW1lcylcbiAgICAgICAgKVxuICAgICAgKVxuICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuY29uY2F0KGZpbGVuYW1lcylcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHNcbiAgfSlcbn1cblxuT2JqZWN0LmFzc2lnbihhZ2xvYiwge1xuICBzeW5jIChwYXR0ZXJucywgb3B0aW9ucykge1xuICAgIHJldHVybiBbXS5jb25jYXQocGF0dGVybnMgfHwgW10pXG4gICAgICAucmVkdWNlKChyZXN1bHQsIHBhdHRlcm4pID0+IHJlc3VsdC5jb25jYXQoZ2xvYi5zeW5jKHBhdHRlcm4sIG9wdGlvbnMpKSwgW10pXG4gIH1cbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gYWdsb2JcbiJdfQ==