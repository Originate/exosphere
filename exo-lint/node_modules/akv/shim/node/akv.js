/**
 * A simple key value store
 * @class AKV
 * @param {string} filename - Filename to store data
 * @param {Object} [options]
 * @param {number} [options.interval=1000] - Flush interval
 */
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Storage = require('./storage');
var co = require('co');

/** @lends AKV */

var AKV = function () {
  function AKV(filename) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    (0, _classCallCheck3.default)(this, AKV);

    var s = this;
    if (!filename) {
      throw new Error('filename is required');
    }
    var _options$interval = options.interval;
    var interval = _options$interval === undefined ? 1000 : _options$interval;

    s.storage = new Storage(filename, { interval: interval }).start(interval);

    process.setMaxListeners(process.getMaxListeners() + 2);
    process.on('beforeExit', function () {
      return s.handleBeforeExit();
    });
    process.on('exit', function () {
      return s.handleExit();
    });
  }

  /**
   * Touch file
   * @function touch
   * @returns {Promise}
   */


  (0, _createClass3.default)(AKV, [{
    key: 'touch',
    value: function touch() {
      var s = this;
      var storage = s.storage;

      return co(_regenerator2.default.mark(function _callee() {
        var data;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return storage.read();

              case 2:
                data = _context.sent;

                data = data || {};
                _context.next = 6;
                return storage.write(data);

              case 6:
                _context.next = 8;
                return storage.flush();

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }

    /**
     * Set a value
     * @function set
     * @param {string} key
     * @param {string} value
     * @returns {Promise}
     */

  }, {
    key: 'set',
    value: function set(key, value) {
      var s = this;
      var storage = s.storage;

      return co(_regenerator2.default.mark(function _callee2() {
        var data;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return storage.read();

              case 2:
                data = _context2.sent;

                data = data || {};
                data[key] = value;
                _context2.next = 7;
                return storage.write(data);

              case 7:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
    }

    /**
     * Get all keys
     * @function keys
     * @returns {Promise}
     */

  }, {
    key: 'keys',
    value: function keys() {
      var s = this;
      var storage = s.storage;

      return co(_regenerator2.default.mark(function _callee3() {
        var data;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return storage.read();

              case 2:
                data = _context3.sent;
                return _context3.abrupt('return', (0, _keys2.default)(data || {}));

              case 4:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
    }

    /**
     * Get a value
     * @function get
     * @param {string} key
     * @returns {Promise}
     */

  }, {
    key: 'get',
    value: function get(key) {
      var s = this;
      var storage = s.storage;

      return co(_regenerator2.default.mark(function _callee4() {
        var data;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return storage.read();

              case 2:
                data = _context4.sent;
                return _context4.abrupt('return', data && data[key]);

              case 4:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
    }

    /**
     * Get all values
     * @function all
     * @returns {Promise}
     */

  }, {
    key: 'all',
    value: function all() {
      var s = this;
      var storage = s.storage;

      return co(_regenerator2.default.mark(function _callee5() {
        var data;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return storage.read();

              case 2:
                data = _context5.sent;
                return _context5.abrupt('return', data || {});

              case 4:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
    }

    /**
     * Delete a value
     * @function del
     * @param {string} key
     * @returns {Promise}
     */

  }, {
    key: 'del',
    value: function del(key) {
      var s = this;
      var storage = s.storage;

      return co(_regenerator2.default.mark(function _callee6() {
        var data;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return storage.read();

              case 2:
                data = _context6.sent;

                if (data) {
                  _context6.next = 5;
                  break;
                }

                return _context6.abrupt('return');

              case 5:
                delete data[key];
                _context6.next = 8;
                return storage.write(data);

              case 8:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));
    }

    /**
     * Delete all values
     * @function destroy
     * @returns {Promise}
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      var s = this;
      var storage = s.storage;

      return co(_regenerator2.default.mark(function _callee7() {
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return storage.purge();

              case 2:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));
    }

    /**
     * Commit changes
     * @returns {Promise}
     */

  }, {
    key: 'commit',
    value: function commit() {
      var s = this;
      var storage = s.storage;

      return co(_regenerator2.default.mark(function _callee8() {
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return storage.flush();

              case 2:
                storage.needsFlush = false;

              case 3:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));
    }
  }, {
    key: 'handleBeforeExit',
    value: function handleBeforeExit() {
      var s = this;
      var storage = s.storage;

      storage.flushIfNeeded();
      storage.needsFlush = false;
    }
  }, {
    key: 'handleExit',
    value: function handleExit() {
      var s = this;
      var storage = s.storage;

      if (s.storage.needsFlush) {
        console.warn('[akv] Some uncommitted change has lost. Make sure to call akv.commit() before existing.');
      }
    }
  }]);
  return AKV;
}();

module.exports = AKV;
//# sourceMappingURL=data:application/json;base64,