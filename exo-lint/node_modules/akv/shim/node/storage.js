/**
 * File system storage
 * @augments EventEmitter
 * @class Storage
 * @param {string} filename
 * @param {Object} data
 */
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('events');

var EventEmitter = _require.EventEmitter;

var co = require('co');
var fs = require('fs');
var readFromFile = require('./file/read_from_file');
var writeToFile = require('./file/write_to_file');
var fileHash = require('./file/file_hash');

/** @lends Storage */

var Storage = function (_EventEmitter) {
  (0, _inherits3.default)(Storage, _EventEmitter);

  function Storage(filename) {
    (0, _classCallCheck3.default)(this, Storage);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Storage.__proto__ || (0, _getPrototypeOf2.default)(Storage)).call(this));

    var s = _this;
    s.filename = filename;
    s.hash = null;
    s.memory = null;
    s.needsFlush = false;
    s._flushing = false;
    s._flushTimer = -1;
    return _this;
  }

  /**
   * Read data
   * @returns {Promise}
   */


  (0, _createClass3.default)(Storage, [{
    key: 'read',
    value: function read() {
      var s = this;
      var filename = s.filename;
      var memory = s.memory;

      return co(_regenerator2.default.mark(function _callee() {
        var hash, cached, data;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return fileHash(filename);

              case 2:
                hash = _context.sent;
                cached = !hash || s.hash === hash;

                if (!cached) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt('return', memory);

              case 6:
                s.hash = hash;

                data = readFromFile(filename);

                s.memory = data;
                return _context.abrupt('return', data);

              case 10:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }

    /**
     * Write data
     * @param data
     * @returns {*|Promise}
     */

  }, {
    key: 'write',
    value: function write(data) {
      var s = this;
      var filename = s.filename;

      return co(_regenerator2.default.mark(function _callee2() {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                s.memory = data;
                _context2.next = 3;
                return fileHash(filename);

              case 3:
                s.hash = _context2.sent;

                s.needsFlush = true;

              case 5:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
    }

    /**
     * Save data into file system
     * @returns {Promise}
     */

  }, {
    key: 'flush',
    value: function flush() {
      var s = this;
      var filename = s.filename;
      var memory = s.memory;

      return co(_regenerator2.default.mark(function _callee3() {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!s._flushing) {
                  _context3.next = 4;
                  break;
                }

                clearTimeout(s._flushTimer);
                s._flushTimer = setTimeout(function () {
                  return s.flush();
                }, 100);
                return _context3.abrupt('return');

              case 4:
                s._flushing = true;
                _context3.next = 7;
                return writeToFile(filename, memory);

              case 7:
                _context3.next = 9;
                return fileHash(filename);

              case 9:
                s.hash = _context3.sent;

                s._flushing = false;

              case 11:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
    }

    /**
     * Flush only if needed
     * @returns {Promise}
     */

  }, {
    key: 'flushIfNeeded',
    value: function flushIfNeeded() {
      var s = this;
      return co(_regenerator2.default.mark(function _callee4() {
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!s.needsFlush) {
                  _context4.next = 5;
                  break;
                }

                _context4.next = 3;
                return s.flush();

              case 3:
                s.emit('flush', { data: s.memory });
                s.needsFlush = false;

              case 5:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
    }

    /**
     * Purge data
     * @returns {Promise}
     */

  }, {
    key: 'purge',
    value: function purge() {
      var s = this;
      var filename = s.filename;
      var memory = s.memory;

      clearTimeout(s._flushTimer);
      s.memory = null;
      return co(_regenerator2.default.mark(function _callee5() {
        var exists;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                exists = fs.existsSync(filename);

                if (exists) {
                  fs.unlinkSync(filename);
                  s.emit('purge', { filename: filename, memory: memory });
                }

              case 2:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
    }
  }, {
    key: 'start',
    value: function start(interval) {
      var s = this;
      if (s._timer) {
        throw new Error('Already started!');
      }
      s._timer = setInterval(function () {
        s.flushIfNeeded();
      }, interval).unref();
      return s;
    }
  }, {
    key: 'stop',
    value: function stop() {
      var s = this;
      clearInterval(s._timer);
      return s;
    }
  }]);
  return Storage;
}(EventEmitter);

module.exports = Storage;
//# sourceMappingURL=data:application/json;base64,