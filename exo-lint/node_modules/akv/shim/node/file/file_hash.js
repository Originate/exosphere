/**
 * Create hash from file hash
 * @function fileHash
 * @param {string} filename - Filename to hash
 * @returns {Object} hash - Hash data
 */
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('crc');

var crc32 = _require.crc32;

var co = require('co');

var _require2 = require('asfs');

var existsAsync = _require2.existsAsync;
var statAsync = _require2.statAsync;

/** @lends fileHash */

function fileHash(filename) {
  return co(_regenerator2.default.mark(function _callee() {
    var stat, dataString;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return existsAsync(filename);

          case 2:
            _context.t0 = _context.sent;

            if (!_context.t0) {
              _context.next = 7;
              break;
            }

            _context.next = 6;
            return statAsync(filename);

          case 6:
            _context.t0 = _context.sent;

          case 7:
            stat = _context.t0;

            if (stat) {
              _context.next = 10;
              break;
            }

            return _context.abrupt('return', null);

          case 10:
            dataString = (0, _stringify2.default)(stat, function (k, v) {
              var ignore = k === 'atime';
              return ignore ? undefined : v;
            });
            return _context.abrupt('return', crc32(dataString));

          case 12:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
}

module.exports = fileHash;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGVfaGFzaC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiY3JjMzIiLCJjbyIsImV4aXN0c0FzeW5jIiwic3RhdEFzeW5jIiwiZmlsZUhhc2giLCJmaWxlbmFtZSIsInN0YXQiLCJkYXRhU3RyaW5nIiwiayIsInYiLCJpZ25vcmUiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7OztlQUVrQkEsUUFBUSxLQUFSLEM7O0lBQVZDLEssWUFBQUEsSzs7QUFDUixJQUFNQyxLQUFLRixRQUFRLElBQVIsQ0FBWDs7Z0JBQ21DQSxRQUFRLE1BQVIsQzs7SUFBM0JHLFcsYUFBQUEsVztJQUFhQyxTLGFBQUFBLFM7O0FBRXJCOztBQUNBLFNBQVNDLFFBQVQsQ0FBbUJDLFFBQW5CLEVBQTZCO0FBQzNCLFNBQU9KLDhCQUFHO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBQ1VDLFlBQVlHLFFBQVosQ0FEVjs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUEsbUJBQzJDRixVQUFVRSxRQUFWLENBRDNDOztBQUFBO0FBQUE7O0FBQUE7QUFDSkMsZ0JBREk7O0FBQUEsZ0JBRUhBLElBRkc7QUFBQTtBQUFBO0FBQUE7O0FBQUEsNkNBR0MsSUFIRDs7QUFBQTtBQUtKQyxzQkFMSSxHQUtTLHlCQUFlRCxJQUFmLEVBQXFCLFVBQUNFLENBQUQsRUFBSUMsQ0FBSixFQUFVO0FBQzlDLGtCQUFJQyxTQUFVRixNQUFNLE9BQXBCO0FBQ0EscUJBQU9FLFNBQVNDLFNBQVQsR0FBcUJGLENBQTVCO0FBQ0QsYUFIZ0IsQ0FMVDtBQUFBLDZDQVNEVCxNQUFNTyxVQUFOLENBVEM7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBSCxFQUFQO0FBV0Q7O0FBRURLLE9BQU9DLE9BQVAsR0FBaUJULFFBQWpCIiwiZmlsZSI6ImZpbGVfaGFzaC5qcyIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZSBoYXNoIGZyb20gZmlsZSBoYXNoXG4gKiBAZnVuY3Rpb24gZmlsZUhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZSAtIEZpbGVuYW1lIHRvIGhhc2hcbiAqIEByZXR1cm5zIHtPYmplY3R9IGhhc2ggLSBIYXNoIGRhdGFcbiAqL1xuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgY3JjMzIgfSA9IHJlcXVpcmUoJ2NyYycpXG5jb25zdCBjbyA9IHJlcXVpcmUoJ2NvJylcbmNvbnN0IHsgZXhpc3RzQXN5bmMsIHN0YXRBc3luYyB9ID0gcmVxdWlyZSgnYXNmcycpXG5cbi8qKiBAbGVuZHMgZmlsZUhhc2ggKi9cbmZ1bmN0aW9uIGZpbGVIYXNoIChmaWxlbmFtZSkge1xuICByZXR1cm4gY28oZnVuY3Rpb24gKiAoKSB7XG4gICAgbGV0IHN0YXQgPSAoeWllbGQgZXhpc3RzQXN5bmMoZmlsZW5hbWUpKSAmJiAoeWllbGQgc3RhdEFzeW5jKGZpbGVuYW1lKSlcbiAgICBpZiAoIXN0YXQpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIGxldCBkYXRhU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoc3RhdCwgKGssIHYpID0+IHtcbiAgICAgIGxldCBpZ25vcmUgPSAoayA9PT0gJ2F0aW1lJylcbiAgICAgIHJldHVybiBpZ25vcmUgPyB1bmRlZmluZWQgOiB2XG4gICAgfSlcbiAgICByZXR1cm4gY3JjMzIoZGF0YVN0cmluZylcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaWxlSGFzaFxuIl19