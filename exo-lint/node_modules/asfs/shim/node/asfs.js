/**
 * @module asfs
 */
'use strict';

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fs = require('fs');
var mkdirp = require('mkdirp');

module.exports = (0, _assign2.default)(exports, {
  /**
   * Check file exists
   * @param {string} filename
   * @returns {Promise.<boolean>}
   */
  existsAsync: function existsAsync(filename) {
    return new _promise2.default(function (resolve) {
      return fs.exists(filename, function (exists) {
        return resolve(exists);
      });
    });
  },


  /**
   * Make directories with parent option.
   * @param {string} dirname
   * @returns {Promise}
   */
  mkdirpAsync: function mkdirpAsync(dirname) {
    return new _promise2.default(function (resolve, reject) {
      return mkdirp(dirname, function (err) {
        return err ? reject(err) : resolve();
      });
    });
  },


  /**
   * Read file
   * @param {string} filename
   * @param {string} [encode]
   * @returns {Promise}
   */
  readFileAsync: function readFileAsync(filename, encode) {
    var args = [].concat(Array.prototype.slice.call(arguments));
    return new _promise2.default(function (resolve, reject) {
      return fs.readFile.apply(fs, (0, _toConsumableArray3.default)(args.concat(function (err, content) {
        return err ? reject(err) : resolve(content);
      })));
    });
  },


  /**
   * Write a file
   * @param {string} filename
   * @param {string} content
   * @returns {Promise}
   */
  writeFileAsync: function writeFileAsync(filename, content) {
    var args = [].concat(Array.prototype.slice.call(arguments));
    return new _promise2.default(function (resolve, reject) {
      return fs.writeFile.apply(fs, (0, _toConsumableArray3.default)(args.concat(function (err) {
        return err ? reject(err) : resolve();
      })));
    });
  },


  /**
   * Unlink a file
   * @param {string} filename
   * @returns {Promise}
   */
  unlinkAsync: function unlinkAsync(filename) {
    return new _promise2.default(function (resolve, reject) {
      return fs.unlink(filename, function (err) {
        return err ? reject(err) : resolve();
      });
    });
  },


  /**
   * Get state of a file
   * @param {string} filename
   * @returns {Promise}
   */
  statAsync: function statAsync(filename) {
    return new _promise2.default(function (resolve, reject) {
      return fs.stat(filename, function (err, stat) {
        return err ? reject(err) : resolve(stat);
      });
    });
  },


  /**
   * Read directory
   * @param {string} dirname
   * @param {Object} [options]
   * @returns {Promise}
   */
  readdirAsync: function readdirAsync(dirname) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    return new _promise2.default(function (resolve, reject) {
      return fs.readdir(dirname, options, function (err, result) {
        return err ? reject(err) : resolve(result);
      });
    });
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzZnMuanMiXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwibWtkaXJwIiwibW9kdWxlIiwiZXhwb3J0cyIsImV4aXN0c0FzeW5jIiwiZmlsZW5hbWUiLCJyZXNvbHZlIiwiZXhpc3RzIiwibWtkaXJwQXN5bmMiLCJkaXJuYW1lIiwicmVqZWN0IiwiZXJyIiwicmVhZEZpbGVBc3luYyIsImVuY29kZSIsImFyZ3MiLCJhcmd1bWVudHMiLCJyZWFkRmlsZSIsImNvbmNhdCIsImNvbnRlbnQiLCJ3cml0ZUZpbGVBc3luYyIsIndyaXRlRmlsZSIsInVubGlua0FzeW5jIiwidW5saW5rIiwic3RhdEFzeW5jIiwic3RhdCIsInJlYWRkaXJBc3luYyIsIm9wdGlvbnMiLCJyZWFkZGlyIiwicmVzdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxLQUFLQyxRQUFRLElBQVIsQ0FBWDtBQUNBLElBQU1DLFNBQVNELFFBQVEsUUFBUixDQUFmOztBQUVBRSxPQUFPQyxPQUFQLEdBQWlCLHNCQUFjQSxPQUFkLEVBQXVCO0FBQ3RDOzs7OztBQUtBQyxhQU5zQyx1QkFNekJDLFFBTnlCLEVBTWY7QUFDckIsV0FBTyxzQkFBWSxVQUFDQyxPQUFEO0FBQUEsYUFDakJQLEdBQUdRLE1BQUgsQ0FBVUYsUUFBVixFQUFvQixVQUFDRSxNQUFEO0FBQUEsZUFBWUQsUUFBUUMsTUFBUixDQUFaO0FBQUEsT0FBcEIsQ0FEaUI7QUFBQSxLQUFaLENBQVA7QUFHRCxHQVZxQzs7O0FBWXRDOzs7OztBQUtBQyxhQWpCc0MsdUJBaUJ6QkMsT0FqQnlCLEVBaUJoQjtBQUNwQixXQUFPLHNCQUFZLFVBQUNILE9BQUQsRUFBVUksTUFBVjtBQUFBLGFBQ2pCVCxPQUFPUSxPQUFQLEVBQWdCLFVBQUNFLEdBQUQ7QUFBQSxlQUFTQSxNQUFNRCxPQUFPQyxHQUFQLENBQU4sR0FBb0JMLFNBQTdCO0FBQUEsT0FBaEIsQ0FEaUI7QUFBQSxLQUFaLENBQVA7QUFHRCxHQXJCcUM7OztBQXVCdEM7Ozs7OztBQU1BTSxlQTdCc0MseUJBNkJ2QlAsUUE3QnVCLEVBNkJiUSxNQTdCYSxFQTZCTDtBQUMvQixRQUFJQyw0Q0FBWUMsU0FBWixFQUFKO0FBQ0EsV0FBTyxzQkFBWSxVQUFDVCxPQUFELEVBQVVJLE1BQVY7QUFBQSxhQUNqQlgsR0FBR2lCLFFBQUgsNENBQWVGLEtBQUtHLE1BQUwsQ0FBWSxVQUFDTixHQUFELEVBQU1PLE9BQU47QUFBQSxlQUFrQlAsTUFBTUQsT0FBT0MsR0FBUCxDQUFOLEdBQW9CTCxRQUFRWSxPQUFSLENBQXRDO0FBQUEsT0FBWixDQUFmLEVBRGlCO0FBQUEsS0FBWixDQUFQO0FBR0QsR0FsQ3FDOzs7QUFvQ3RDOzs7Ozs7QUFNQUMsZ0JBMUNzQywwQkEwQ3RCZCxRQTFDc0IsRUEwQ1phLE9BMUNZLEVBMENIO0FBQ2pDLFFBQUlKLDRDQUFZQyxTQUFaLEVBQUo7QUFDQSxXQUFPLHNCQUFZLFVBQUNULE9BQUQsRUFBVUksTUFBVjtBQUFBLGFBQ2pCWCxHQUFHcUIsU0FBSCw0Q0FBZ0JOLEtBQUtHLE1BQUwsQ0FBWSxVQUFDTixHQUFEO0FBQUEsZUFBU0EsTUFBTUQsT0FBT0MsR0FBUCxDQUFOLEdBQW9CTCxTQUE3QjtBQUFBLE9BQVosQ0FBaEIsRUFEaUI7QUFBQSxLQUFaLENBQVA7QUFHRCxHQS9DcUM7OztBQWlEdEM7Ozs7O0FBS0FlLGFBdERzQyx1QkFzRHpCaEIsUUF0RHlCLEVBc0RmO0FBQ3JCLFdBQU8sc0JBQVksVUFBQ0MsT0FBRCxFQUFVSSxNQUFWO0FBQUEsYUFDakJYLEdBQUd1QixNQUFILENBQVVqQixRQUFWLEVBQW9CLFVBQUNNLEdBQUQ7QUFBQSxlQUFTQSxNQUFNRCxPQUFPQyxHQUFQLENBQU4sR0FBb0JMLFNBQTdCO0FBQUEsT0FBcEIsQ0FEaUI7QUFBQSxLQUFaLENBQVA7QUFHRCxHQTFEcUM7OztBQTREdEM7Ozs7O0FBS0FpQixXQWpFc0MscUJBaUUzQmxCLFFBakUyQixFQWlFakI7QUFDbkIsV0FBTyxzQkFBWSxVQUFDQyxPQUFELEVBQVVJLE1BQVY7QUFBQSxhQUNqQlgsR0FBR3lCLElBQUgsQ0FBUW5CLFFBQVIsRUFBa0IsVUFBQ00sR0FBRCxFQUFNYSxJQUFOO0FBQUEsZUFBZWIsTUFBTUQsT0FBT0MsR0FBUCxDQUFOLEdBQW9CTCxRQUFRa0IsSUFBUixDQUFuQztBQUFBLE9BQWxCLENBRGlCO0FBQUEsS0FBWixDQUFQO0FBR0QsR0FyRXFDOzs7QUF1RXRDOzs7Ozs7QUFNQUMsY0E3RXNDLHdCQTZFeEJoQixPQTdFd0IsRUE2RUQ7QUFBQSxRQUFkaUIsT0FBYyx5REFBSixFQUFJOztBQUNuQyxXQUFPLHNCQUFZLFVBQUNwQixPQUFELEVBQVVJLE1BQVY7QUFBQSxhQUNqQlgsR0FBRzRCLE9BQUgsQ0FBV2xCLE9BQVgsRUFBb0JpQixPQUFwQixFQUE2QixVQUFDZixHQUFELEVBQU1pQixNQUFOO0FBQUEsZUFBaUJqQixNQUFNRCxPQUFPQyxHQUFQLENBQU4sR0FBb0JMLFFBQVFzQixNQUFSLENBQXJDO0FBQUEsT0FBN0IsQ0FEaUI7QUFBQSxLQUFaLENBQVA7QUFHRDtBQWpGcUMsQ0FBdkIsQ0FBakIiLCJmaWxlIjoiYXNmcy5qcyIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgYXNmc1xuICovXG4ndXNlIHN0cmljdCdcblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpXG5jb25zdCBta2RpcnAgPSByZXF1aXJlKCdta2RpcnAnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oZXhwb3J0cywge1xuICAvKipcbiAgICogQ2hlY2sgZmlsZSBleGlzdHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxib29sZWFuPn1cbiAgICovXG4gIGV4aXN0c0FzeW5jIChmaWxlbmFtZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT5cbiAgICAgIGZzLmV4aXN0cyhmaWxlbmFtZSwgKGV4aXN0cykgPT4gcmVzb2x2ZShleGlzdHMpKVxuICAgIClcbiAgfSxcblxuICAvKipcbiAgICogTWFrZSBkaXJlY3RvcmllcyB3aXRoIHBhcmVudCBvcHRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaXJuYW1lXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgbWtkaXJwQXN5bmMgKGRpcm5hbWUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICAgIG1rZGlycChkaXJuYW1lLCAoZXJyKSA9PiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKSlcbiAgICApXG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlYWQgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtlbmNvZGVdXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgcmVhZEZpbGVBc3luYyAoZmlsZW5hbWUsIGVuY29kZSkge1xuICAgIGxldCBhcmdzID0gWyAuLi5hcmd1bWVudHMgXVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgZnMucmVhZEZpbGUoLi4uYXJncy5jb25jYXQoKGVyciwgY29udGVudCkgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKGNvbnRlbnQpKSlcbiAgICApXG4gIH0sXG5cbiAgLyoqXG4gICAqIFdyaXRlIGEgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICB3cml0ZUZpbGVBc3luYyAoZmlsZW5hbWUsIGNvbnRlbnQpIHtcbiAgICBsZXQgYXJncyA9IFsgLi4uYXJndW1lbnRzIF1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICAgIGZzLndyaXRlRmlsZSguLi5hcmdzLmNvbmNhdCgoZXJyKSA9PiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKSkpXG4gICAgKVxuICB9LFxuXG4gIC8qKlxuICAgKiBVbmxpbmsgYSBmaWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIHVubGlua0FzeW5jIChmaWxlbmFtZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgZnMudW5saW5rKGZpbGVuYW1lLCAoZXJyKSA9PiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKSlcbiAgICApXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCBzdGF0ZSBvZiBhIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgc3RhdEFzeW5jIChmaWxlbmFtZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgZnMuc3RhdChmaWxlbmFtZSwgKGVyciwgc3RhdCkgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHN0YXQpKVxuICAgIClcbiAgfSxcblxuICAvKipcbiAgICogUmVhZCBkaXJlY3RvcnlcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRpcm5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIHJlYWRkaXJBc3luYyAoZGlybmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+XG4gICAgICBmcy5yZWFkZGlyKGRpcm5hbWUsIG9wdGlvbnMsIChlcnIsIHJlc3VsdCkgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHJlc3VsdCkpXG4gICAgKVxuICB9XG59KVxuIl19