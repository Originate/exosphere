/**
 * Execute cli.
 * @function execcli
 * @param {string} cmdBin - Bin command to execute.
 * @param {Array} cmdArgs - Bin command arguments to execute.
 * @param {object} [options] - Optional settings.
 * @param {string} [options.notfound] - Instruction text when bin not found.
 * @param {string} [options.cwd=process.cwd()] - Working directory path.
 * @return {Promise}
 * @example
 *
 */

'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argx = require('argx');
var co = require('co');
var arrayreduce = require('arrayreduce');
var hasbin = require('hasbin');
var path = require('path');
var fs = require('fs');
var spawnProcess = require('./processing/spawn_process');
var _optionArgs = require('./_option_args');

var warnCallback = function warnCallback() {
  return console.log('[execcli] Callback is now deprecated. Use promise instead.');
};

/** @lends execcli */
function execcli(cmdBin, cmdArgs, options) {
  var args = argx(arguments);
  var callback = args.pop('function');
  cmdBin = args.shift('string');
  cmdArgs = (args.shift('array') || []).map(function (arg) {
    if ((typeof arg === 'undefined' ? 'undefined' : (0, _typeof3.default)(arg)) === 'object') {
      return _optionArgs(arg);
    }
    return arg;
  }).reduce(arrayreduce.arrayConcat(), []);
  options = args.pop('object') || {};

  var here = process.cwd();
  var cwd = options.cwd || process.cwd();

  return co(_regenerator2.default.mark(function _callee() {
    var hasBinAsIs, hasbinAsPath, valid;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            process.chdir(cwd);
            _context.next = 3;
            return new _promise2.default(function (resolve) {
              return hasbin(cmdBin, function (hasBinAsIs) {
                return resolve(hasBinAsIs);
              });
            });

          case 3:
            hasBinAsIs = _context.sent;
            _context.next = 6;
            return new _promise2.default(function (resolve) {
              return fs.exists(path.resolve(cmdBin), function (hasbinAsPath) {
                return resolve(hasbinAsPath);
              });
            });

          case 6:
            hasbinAsPath = _context.sent;
            valid = hasBinAsIs || hasbinAsPath;

            if (valid) {
              _context.next = 10;
              break;
            }

            throw new Error('Command `' + cmdBin + '` not found. ' + options.notfound);

          case 10:
            _context.next = 12;
            return spawnProcess(cmdBin, cmdArgs, options);

          case 12:
            return _context.abrupt('return', _context.sent);

          case 13:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  })).then(function (result) {
    process.chdir(here);
    if (callback) {
      warnCallback();
      callback(null);
    }
    return result;
  }).catch(function (err) {
    process.chdir(here);
    if (callback) {
      warnCallback();
      callback(err);
    }
    return _promise2.default.reject(err);
  });
}

execcli._optionArgs = _optionArgs;

module.exports = execcli;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4ZWNjbGkuanMiXSwibmFtZXMiOlsiYXJneCIsInJlcXVpcmUiLCJjbyIsImFycmF5cmVkdWNlIiwiaGFzYmluIiwicGF0aCIsImZzIiwic3Bhd25Qcm9jZXNzIiwiX29wdGlvbkFyZ3MiLCJ3YXJuQ2FsbGJhY2siLCJjb25zb2xlIiwibG9nIiwiZXhlY2NsaSIsImNtZEJpbiIsImNtZEFyZ3MiLCJvcHRpb25zIiwiYXJncyIsImFyZ3VtZW50cyIsImNhbGxiYWNrIiwicG9wIiwic2hpZnQiLCJtYXAiLCJhcmciLCJyZWR1Y2UiLCJhcnJheUNvbmNhdCIsImhlcmUiLCJwcm9jZXNzIiwiY3dkIiwiY2hkaXIiLCJyZXNvbHZlIiwiaGFzQmluQXNJcyIsImV4aXN0cyIsImhhc2JpbkFzUGF0aCIsInZhbGlkIiwiRXJyb3IiLCJub3Rmb3VuZCIsInRoZW4iLCJyZXN1bHQiLCJjYXRjaCIsImVyciIsInJlamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBYUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLE1BQVIsQ0FBYjtBQUNBLElBQU1DLEtBQUtELFFBQVEsSUFBUixDQUFYO0FBQ0EsSUFBTUUsY0FBY0YsUUFBUSxhQUFSLENBQXBCO0FBQ0EsSUFBTUcsU0FBU0gsUUFBUSxRQUFSLENBQWY7QUFDQSxJQUFNSSxPQUFPSixRQUFRLE1BQVIsQ0FBYjtBQUNBLElBQU1LLEtBQUtMLFFBQVEsSUFBUixDQUFYO0FBQ0EsSUFBTU0sZUFBZU4sUUFBUSw0QkFBUixDQUFyQjtBQUNBLElBQU1PLGNBQWNQLFFBQVEsZ0JBQVIsQ0FBcEI7O0FBRUEsSUFBSVEsZUFBZSxTQUFmQSxZQUFlO0FBQUEsU0FBTUMsUUFBUUMsR0FBUixDQUFZLDREQUFaLENBQU47QUFBQSxDQUFuQjs7QUFFQTtBQUNBLFNBQVNDLE9BQVQsQ0FBa0JDLE1BQWxCLEVBQTBCQyxPQUExQixFQUFtQ0MsT0FBbkMsRUFBNEM7QUFDMUMsTUFBSUMsT0FBT2hCLEtBQUtpQixTQUFMLENBQVg7QUFDQSxNQUFJQyxXQUFXRixLQUFLRyxHQUFMLENBQVMsVUFBVCxDQUFmO0FBQ0FOLFdBQVNHLEtBQUtJLEtBQUwsQ0FBVyxRQUFYLENBQVQ7QUFDQU4sWUFBVSxDQUFDRSxLQUFLSSxLQUFMLENBQVcsT0FBWCxLQUF1QixFQUF4QixFQUE0QkMsR0FBNUIsQ0FBZ0MsVUFBQ0MsR0FBRCxFQUFTO0FBQ2pELFFBQUksUUFBT0EsR0FBUCx1REFBT0EsR0FBUCxPQUFlLFFBQW5CLEVBQTZCO0FBQzNCLGFBQU9kLFlBQVljLEdBQVosQ0FBUDtBQUNEO0FBQ0QsV0FBT0EsR0FBUDtBQUNELEdBTFMsRUFLUEMsTUFMTyxDQUtBcEIsWUFBWXFCLFdBQVosRUFMQSxFQUsyQixFQUwzQixDQUFWO0FBTUFULFlBQVVDLEtBQUtHLEdBQUwsQ0FBUyxRQUFULEtBQXNCLEVBQWhDOztBQUVBLE1BQUlNLE9BQU9DLFFBQVFDLEdBQVIsRUFBWDtBQUNBLE1BQUlBLE1BQU1aLFFBQVFZLEdBQVIsSUFBZUQsUUFBUUMsR0FBUixFQUF6Qjs7QUFFQSxTQUFPekIsOEJBQUc7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ1J3QixvQkFBUUUsS0FBUixDQUFjRCxHQUFkO0FBRFE7QUFBQSxtQkFFZSxzQkFBWSxVQUFDRSxPQUFEO0FBQUEscUJBQ2pDekIsT0FBT1MsTUFBUCxFQUFlLFVBQUNpQixVQUFEO0FBQUEsdUJBQWdCRCxRQUFRQyxVQUFSLENBQWhCO0FBQUEsZUFBZixDQURpQztBQUFBLGFBQVosQ0FGZjs7QUFBQTtBQUVKQSxzQkFGSTtBQUFBO0FBQUEsbUJBS2lCLHNCQUFZLFVBQUNELE9BQUQ7QUFBQSxxQkFDbkN2QixHQUFHeUIsTUFBSCxDQUFVMUIsS0FBS3dCLE9BQUwsQ0FBYWhCLE1BQWIsQ0FBVixFQUFnQyxVQUFDbUIsWUFBRDtBQUFBLHVCQUFrQkgsUUFBUUcsWUFBUixDQUFsQjtBQUFBLGVBQWhDLENBRG1DO0FBQUEsYUFBWixDQUxqQjs7QUFBQTtBQUtKQSx3QkFMSTtBQVFKQyxpQkFSSSxHQVFJSCxjQUFjRSxZQVJsQjs7QUFBQSxnQkFTSEMsS0FURztBQUFBO0FBQUE7QUFBQTs7QUFBQSxrQkFVQSxJQUFJQyxLQUFKLGVBQ1NyQixNQURULHFCQUNnQ0UsUUFBUW9CLFFBRHhDLENBVkE7O0FBQUE7QUFBQTtBQUFBLG1CQWNLNUIsYUFBYU0sTUFBYixFQUFxQkMsT0FBckIsRUFBOEJDLE9BQTlCLENBZEw7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFILEdBZUpxQixJQWZJLENBZUMsVUFBQ0MsTUFBRCxFQUFZO0FBQ2xCWCxZQUFRRSxLQUFSLENBQWNILElBQWQ7QUFDQSxRQUFJUCxRQUFKLEVBQWM7QUFDWlQ7QUFDQVMsZUFBUyxJQUFUO0FBQ0Q7QUFDRCxXQUFPbUIsTUFBUDtBQUNELEdBdEJNLEVBc0JKQyxLQXRCSSxDQXNCRSxVQUFDQyxHQUFELEVBQVM7QUFDaEJiLFlBQVFFLEtBQVIsQ0FBY0gsSUFBZDtBQUNBLFFBQUlQLFFBQUosRUFBYztBQUNaVDtBQUNBUyxlQUFTcUIsR0FBVDtBQUNEO0FBQ0QsV0FBTyxrQkFBUUMsTUFBUixDQUFlRCxHQUFmLENBQVA7QUFDRCxHQTdCTSxDQUFQO0FBOEJEOztBQUVEM0IsUUFBUUosV0FBUixHQUFzQkEsV0FBdEI7O0FBRUFpQyxPQUFPQyxPQUFQLEdBQWlCOUIsT0FBakIiLCJmaWxlIjoiZXhlY2NsaS5qcyIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4ZWN1dGUgY2xpLlxuICogQGZ1bmN0aW9uIGV4ZWNjbGlcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbWRCaW4gLSBCaW4gY29tbWFuZCB0byBleGVjdXRlLlxuICogQHBhcmFtIHtBcnJheX0gY21kQXJncyAtIEJpbiBjb21tYW5kIGFyZ3VtZW50cyB0byBleGVjdXRlLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm5vdGZvdW5kXSAtIEluc3RydWN0aW9uIHRleHQgd2hlbiBiaW4gbm90IGZvdW5kLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmN3ZD1wcm9jZXNzLmN3ZCgpXSAtIFdvcmtpbmcgZGlyZWN0b3J5IHBhdGguXG4gKiBAcmV0dXJuIHtQcm9taXNlfVxuICogQGV4YW1wbGVcbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGFyZ3ggPSByZXF1aXJlKCdhcmd4JylcbmNvbnN0IGNvID0gcmVxdWlyZSgnY28nKVxuY29uc3QgYXJyYXlyZWR1Y2UgPSByZXF1aXJlKCdhcnJheXJlZHVjZScpXG5jb25zdCBoYXNiaW4gPSByZXF1aXJlKCdoYXNiaW4nKVxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpXG5jb25zdCBzcGF3blByb2Nlc3MgPSByZXF1aXJlKCcuL3Byb2Nlc3Npbmcvc3Bhd25fcHJvY2VzcycpXG5jb25zdCBfb3B0aW9uQXJncyA9IHJlcXVpcmUoJy4vX29wdGlvbl9hcmdzJylcblxubGV0IHdhcm5DYWxsYmFjayA9ICgpID0+IGNvbnNvbGUubG9nKCdbZXhlY2NsaV0gQ2FsbGJhY2sgaXMgbm93IGRlcHJlY2F0ZWQuIFVzZSBwcm9taXNlIGluc3RlYWQuJylcblxuLyoqIEBsZW5kcyBleGVjY2xpICovXG5mdW5jdGlvbiBleGVjY2xpIChjbWRCaW4sIGNtZEFyZ3MsIG9wdGlvbnMpIHtcbiAgbGV0IGFyZ3MgPSBhcmd4KGFyZ3VtZW50cylcbiAgbGV0IGNhbGxiYWNrID0gYXJncy5wb3AoJ2Z1bmN0aW9uJylcbiAgY21kQmluID0gYXJncy5zaGlmdCgnc3RyaW5nJylcbiAgY21kQXJncyA9IChhcmdzLnNoaWZ0KCdhcnJheScpIHx8IFtdKS5tYXAoKGFyZykgPT4ge1xuICAgIGlmICh0eXBlb2YgYXJnID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIF9vcHRpb25BcmdzKGFyZylcbiAgICB9XG4gICAgcmV0dXJuIGFyZ1xuICB9KS5yZWR1Y2UoYXJyYXlyZWR1Y2UuYXJyYXlDb25jYXQoKSwgW10pXG4gIG9wdGlvbnMgPSBhcmdzLnBvcCgnb2JqZWN0JykgfHwge31cblxuICBsZXQgaGVyZSA9IHByb2Nlc3MuY3dkKClcbiAgbGV0IGN3ZCA9IG9wdGlvbnMuY3dkIHx8IHByb2Nlc3MuY3dkKClcblxuICByZXR1cm4gY28oZnVuY3Rpb24gKiAoKSB7XG4gICAgcHJvY2Vzcy5jaGRpcihjd2QpXG4gICAgbGV0IGhhc0JpbkFzSXMgPSB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT5cbiAgICAgIGhhc2JpbihjbWRCaW4sIChoYXNCaW5Bc0lzKSA9PiByZXNvbHZlKGhhc0JpbkFzSXMpKVxuICAgIClcbiAgICBsZXQgaGFzYmluQXNQYXRoID0geWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+XG4gICAgICBmcy5leGlzdHMocGF0aC5yZXNvbHZlKGNtZEJpbiksIChoYXNiaW5Bc1BhdGgpID0+IHJlc29sdmUoaGFzYmluQXNQYXRoKSlcbiAgICApXG4gICAgbGV0IHZhbGlkID0gaGFzQmluQXNJcyB8fCBoYXNiaW5Bc1BhdGhcbiAgICBpZiAoIXZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBDb21tYW5kIFxcYCR7Y21kQmlufVxcYCBub3QgZm91bmQuICR7b3B0aW9ucy5ub3Rmb3VuZH1gXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiB5aWVsZCBzcGF3blByb2Nlc3MoY21kQmluLCBjbWRBcmdzLCBvcHRpb25zKVxuICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICBwcm9jZXNzLmNoZGlyKGhlcmUpXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB3YXJuQ2FsbGJhY2soKVxuICAgICAgY2FsbGJhY2sobnVsbClcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgcHJvY2Vzcy5jaGRpcihoZXJlKVxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgd2FybkNhbGxiYWNrKClcbiAgICAgIGNhbGxiYWNrKGVycilcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycilcbiAgfSlcbn1cblxuZXhlY2NsaS5fb3B0aW9uQXJncyA9IF9vcHRpb25BcmdzXG5cbm1vZHVsZS5leHBvcnRzID0gZXhlY2NsaVxuIl19