/**
 * Execute npm bin script.
 * @function npmBin
 * @param {string} cmdBin - Bin command to execute.
 * @param {Array} cmdArgs - Bin command arguments to execute.
 * @param {object} [options] - Optional settings.
 * @param {string} [options.notfound] - Instruction text when bin not found.
 * @param {string|string[]} [options.search=[]] - Local module search path.
 * @param {function} [callback] - Callback when done.
 */

'use strict';

var findout = require('findout');
var argx = require('argx');
var execcli = require('./execcli');

/** @lends npmBin */
function npmBin(cmd, cmdArgs, options) {
  var args = argx(arguments);
  var callback = args.pop('function');
  options = args.pop('object') || {};

  var search = [].concat(options.search || []);
  cmd = _resolve(cmd, search);
  delete options.search;
  if (callback) {
    execcli(cmd, cmdArgs, options, callback);
  }
  return execcli(cmd, cmdArgs, options);
}

module.exports = npmBin;

function _resolve(bin, cwd) {
  for (var i = 0; i < cwd.length; i++) {
    var found = _resolveByLocal(bin, cwd[i]);
    if (found) {
      return found;
    }
  }
  return bin;
}

function _resolveByLocal(bin, cwd) {
  return findout.resolve('node_modules/.bin/' + bin, {
    safe: true,
    cwd: cwd
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbV9iaW4uanMiXSwibmFtZXMiOlsiZmluZG91dCIsInJlcXVpcmUiLCJhcmd4IiwiZXhlY2NsaSIsIm5wbUJpbiIsImNtZCIsImNtZEFyZ3MiLCJvcHRpb25zIiwiYXJncyIsImFyZ3VtZW50cyIsImNhbGxiYWNrIiwicG9wIiwic2VhcmNoIiwiY29uY2F0IiwiX3Jlc29sdmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYmluIiwiY3dkIiwiaSIsImxlbmd0aCIsImZvdW5kIiwiX3Jlc29sdmVCeUxvY2FsIiwicmVzb2x2ZSIsInNhZmUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVdBOztBQUVBLElBQU1BLFVBQVVDLFFBQVEsU0FBUixDQUFoQjtBQUNBLElBQU1DLE9BQU9ELFFBQVEsTUFBUixDQUFiO0FBQ0EsSUFBTUUsVUFBVUYsUUFBUSxXQUFSLENBQWhCOztBQUVBO0FBQ0EsU0FBU0csTUFBVCxDQUFpQkMsR0FBakIsRUFBc0JDLE9BQXRCLEVBQStCQyxPQUEvQixFQUF3QztBQUN0QyxNQUFJQyxPQUFPTixLQUFLTyxTQUFMLENBQVg7QUFDQSxNQUFJQyxXQUFXRixLQUFLRyxHQUFMLENBQVMsVUFBVCxDQUFmO0FBQ0FKLFlBQVVDLEtBQUtHLEdBQUwsQ0FBUyxRQUFULEtBQXNCLEVBQWhDOztBQUVBLE1BQUlDLFNBQVMsR0FBR0MsTUFBSCxDQUFVTixRQUFRSyxNQUFSLElBQWtCLEVBQTVCLENBQWI7QUFDQVAsUUFBTVMsU0FBU1QsR0FBVCxFQUFjTyxNQUFkLENBQU47QUFDQSxTQUFPTCxRQUFRSyxNQUFmO0FBQ0EsTUFBSUYsUUFBSixFQUFjO0FBQ1pQLFlBQVFFLEdBQVIsRUFBYUMsT0FBYixFQUFzQkMsT0FBdEIsRUFBK0JHLFFBQS9CO0FBQ0Q7QUFDRCxTQUFPUCxRQUFRRSxHQUFSLEVBQWFDLE9BQWIsRUFBc0JDLE9BQXRCLENBQVA7QUFDRDs7QUFFRFEsT0FBT0MsT0FBUCxHQUFpQlosTUFBakI7O0FBRUEsU0FBU1UsUUFBVCxDQUFtQkcsR0FBbkIsRUFBd0JDLEdBQXhCLEVBQTZCO0FBQzNCLE9BQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRCxJQUFJRSxNQUF4QixFQUFnQ0QsR0FBaEMsRUFBcUM7QUFDbkMsUUFBSUUsUUFBUUMsZ0JBQWdCTCxHQUFoQixFQUFxQkMsSUFBS0MsQ0FBTCxDQUFyQixDQUFaO0FBQ0EsUUFBSUUsS0FBSixFQUFXO0FBQ1QsYUFBT0EsS0FBUDtBQUNEO0FBQ0Y7QUFDRCxTQUFPSixHQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssZUFBVCxDQUEwQkwsR0FBMUIsRUFBK0JDLEdBQS9CLEVBQW9DO0FBQ2xDLFNBQU9sQixRQUFRdUIsT0FBUixDQUFnQix1QkFBdUJOLEdBQXZDLEVBQTRDO0FBQ2pETyxVQUFNLElBRDJDO0FBRWpETixTQUFLQTtBQUY0QyxHQUE1QyxDQUFQO0FBSUQiLCJmaWxlIjoibnBtX2Jpbi5qcyIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4ZWN1dGUgbnBtIGJpbiBzY3JpcHQuXG4gKiBAZnVuY3Rpb24gbnBtQmluXG4gKiBAcGFyYW0ge3N0cmluZ30gY21kQmluIC0gQmluIGNvbW1hbmQgdG8gZXhlY3V0ZS5cbiAqIEBwYXJhbSB7QXJyYXl9IGNtZEFyZ3MgLSBCaW4gY29tbWFuZCBhcmd1bWVudHMgdG8gZXhlY3V0ZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5ub3Rmb3VuZF0gLSBJbnN0cnVjdGlvbiB0ZXh0IHdoZW4gYmluIG5vdCBmb3VuZC5cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbb3B0aW9ucy5zZWFyY2g9W11dIC0gTG9jYWwgbW9kdWxlIHNlYXJjaCBwYXRoLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSAtIENhbGxiYWNrIHdoZW4gZG9uZS5cbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgZmluZG91dCA9IHJlcXVpcmUoJ2ZpbmRvdXQnKVxuY29uc3QgYXJneCA9IHJlcXVpcmUoJ2FyZ3gnKVxuY29uc3QgZXhlY2NsaSA9IHJlcXVpcmUoJy4vZXhlY2NsaScpXG5cbi8qKiBAbGVuZHMgbnBtQmluICovXG5mdW5jdGlvbiBucG1CaW4gKGNtZCwgY21kQXJncywgb3B0aW9ucykge1xuICBsZXQgYXJncyA9IGFyZ3goYXJndW1lbnRzKVxuICBsZXQgY2FsbGJhY2sgPSBhcmdzLnBvcCgnZnVuY3Rpb24nKVxuICBvcHRpb25zID0gYXJncy5wb3AoJ29iamVjdCcpIHx8IHt9XG5cbiAgbGV0IHNlYXJjaCA9IFtdLmNvbmNhdChvcHRpb25zLnNlYXJjaCB8fCBbXSlcbiAgY21kID0gX3Jlc29sdmUoY21kLCBzZWFyY2gpXG4gIGRlbGV0ZSBvcHRpb25zLnNlYXJjaFxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBleGVjY2xpKGNtZCwgY21kQXJncywgb3B0aW9ucywgY2FsbGJhY2spXG4gIH1cbiAgcmV0dXJuIGV4ZWNjbGkoY21kLCBjbWRBcmdzLCBvcHRpb25zKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5wbUJpblxuXG5mdW5jdGlvbiBfcmVzb2x2ZSAoYmluLCBjd2QpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjd2QubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgZm91bmQgPSBfcmVzb2x2ZUJ5TG9jYWwoYmluLCBjd2RbIGkgXSlcbiAgICBpZiAoZm91bmQpIHtcbiAgICAgIHJldHVybiBmb3VuZFxuICAgIH1cbiAgfVxuICByZXR1cm4gYmluXG59XG5cbmZ1bmN0aW9uIF9yZXNvbHZlQnlMb2NhbCAoYmluLCBjd2QpIHtcbiAgcmV0dXJuIGZpbmRvdXQucmVzb2x2ZSgnbm9kZV9tb2R1bGVzLy5iaW4vJyArIGJpbiwge1xuICAgIHNhZmU6IHRydWUsXG4gICAgY3dkOiBjd2RcbiAgfSlcbn1cbiJdfQ==