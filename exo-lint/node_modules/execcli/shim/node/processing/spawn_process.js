/**
 * @function spawnProcess
 */
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var co = require('co');
var childProcess = require('child_process');

/** @lends spawnProcess */
function spawnProcess(bin, args, options) {
  return co(_regenerator2.default.mark(function _callee() {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return new _promise2.default(function (resolve, reject) {
              var spawned = childProcess.spawn(bin, args, options);
              spawned.stdout.pipe(process.stdout);
              spawned.stderr.pipe(process.stderr);
              spawned.on('exit', function (exitCode) {
                var err = exitCode === 0 ? null : new Error('Exit with code: ' + exitCode);
                err ? reject(err) : resolve();
              });
              return spawned;
            });

          case 2:
            return _context.abrupt('return', _context.sent);

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
}

module.exports = spawnProcess;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwYXduX3Byb2Nlc3MuanMiXSwibmFtZXMiOlsiY28iLCJyZXF1aXJlIiwiY2hpbGRQcm9jZXNzIiwic3Bhd25Qcm9jZXNzIiwiYmluIiwiYXJncyIsIm9wdGlvbnMiLCJyZXNvbHZlIiwicmVqZWN0Iiwic3Bhd25lZCIsInNwYXduIiwic3Rkb3V0IiwicGlwZSIsInByb2Nlc3MiLCJzdGRlcnIiLCJvbiIsImV4aXRDb2RlIiwiZXJyIiwiRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBR0E7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLEtBQUtDLFFBQVEsSUFBUixDQUFYO0FBQ0EsSUFBTUMsZUFBZUQsUUFBUSxlQUFSLENBQXJCOztBQUVBO0FBQ0EsU0FBU0UsWUFBVCxDQUF1QkMsR0FBdkIsRUFBNEJDLElBQTVCLEVBQWtDQyxPQUFsQyxFQUEyQztBQUN6QyxTQUFPTiw4QkFBRztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFDSyxzQkFBWSxVQUFDTyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDNUMsa0JBQUlDLFVBQVVQLGFBQWFRLEtBQWIsQ0FBbUJOLEdBQW5CLEVBQXdCQyxJQUF4QixFQUE4QkMsT0FBOUIsQ0FBZDtBQUNBRyxzQkFBUUUsTUFBUixDQUFlQyxJQUFmLENBQW9CQyxRQUFRRixNQUE1QjtBQUNBRixzQkFBUUssTUFBUixDQUFlRixJQUFmLENBQW9CQyxRQUFRQyxNQUE1QjtBQUNBTCxzQkFBUU0sRUFBUixDQUFXLE1BQVgsRUFBbUIsVUFBVUMsUUFBVixFQUFvQjtBQUNyQyxvQkFBSUMsTUFBTUQsYUFBYSxDQUFiLEdBQWlCLElBQWpCLEdBQXdCLElBQUlFLEtBQUosc0JBQTZCRixRQUE3QixDQUFsQztBQUNBQyxzQkFBTVQsT0FBT1MsR0FBUCxDQUFOLEdBQW9CVixTQUFwQjtBQUNELGVBSEQ7QUFJQSxxQkFBT0UsT0FBUDtBQUNELGFBVFksQ0FETDs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQUgsRUFBUDtBQVlEOztBQUVEVSxPQUFPQyxPQUFQLEdBQWlCakIsWUFBakIiLCJmaWxlIjoic3Bhd25fcHJvY2Vzcy5qcyIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmdW5jdGlvbiBzcGF3blByb2Nlc3NcbiAqL1xuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGNvID0gcmVxdWlyZSgnY28nKVxuY29uc3QgY2hpbGRQcm9jZXNzID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpXG5cbi8qKiBAbGVuZHMgc3Bhd25Qcm9jZXNzICovXG5mdW5jdGlvbiBzcGF3blByb2Nlc3MgKGJpbiwgYXJncywgb3B0aW9ucykge1xuICByZXR1cm4gY28oZnVuY3Rpb24gKiAoKSB7XG4gICAgcmV0dXJuIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCBzcGF3bmVkID0gY2hpbGRQcm9jZXNzLnNwYXduKGJpbiwgYXJncywgb3B0aW9ucylcbiAgICAgIHNwYXduZWQuc3Rkb3V0LnBpcGUocHJvY2Vzcy5zdGRvdXQpXG4gICAgICBzcGF3bmVkLnN0ZGVyci5waXBlKHByb2Nlc3Muc3RkZXJyKVxuICAgICAgc3Bhd25lZC5vbignZXhpdCcsIGZ1bmN0aW9uIChleGl0Q29kZSkge1xuICAgICAgICBsZXQgZXJyID0gZXhpdENvZGUgPT09IDAgPyBudWxsIDogbmV3IEVycm9yKGBFeGl0IHdpdGggY29kZTogJHtleGl0Q29kZX1gKVxuICAgICAgICBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKVxuICAgICAgfSlcbiAgICAgIHJldHVybiBzcGF3bmVkXG4gICAgfSlcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzcGF3blByb2Nlc3NcbiJdfQ==