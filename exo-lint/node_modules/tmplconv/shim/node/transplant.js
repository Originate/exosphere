/**
 * Tmplify and render at once.
 * @memberof module:tmplconv/lib
 * @function transplant
 * @param {string} src - Name of destination directory.
 * @param {string} dest - Name of destination directory, which contains template files.
 * @param {object} options - Optional settings.
 * @param {string|object} options.rule - Rule for convert.
 * @param {string|string[]} options.pattern - Source patterns.
 * @param {string|string[]} [options.ignore] - Filename pattern.
 * @param {boolean} [options.silent=false] - Silent or not.
 * @param {string} [options.mode='644'] - File permission to generate.
 * @param {boolean} [options.clean=false] - Cleanup destination directory before convert.
 * @param {boolean} [options.once=false] - Write only first time. Skip if already exists.
 * @returns {Promise}
 */

'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argx = require('argx');
var co = require('co');
var path = require('path');
var tmplify = require('./tmplify');
var rimraf = require('rimraf');
var render = require('./render');

/** @lends transplant */
function transplant(src, dest, options) {
  var args = argx(arguments);
  if (args.pop('function')) {
    throw new Error('Callback is no longer supported. Use promise interface instead.');
  }
  options = args.pop('object') || {};

  var tmp = _nameTmp(dest);
  var tmplifyDo = {},
      renderDo = {};
  var rule = options.rule || {};
  (0, _keys2.default)(rule).forEach(function (src, i) {
    var key = 'key_' + i;
    tmplifyDo[key] = src;
    renderDo[key] = rule[src];
  });
  return co(_regenerator2.default.mark(function _callee() {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return new _promise2.default(function (resolve, reject) {
              return rimraf(tmp, function (err) {
                return err ? reject(err) : resolve();
              });
            });

          case 2:
            _context.next = 4;
            return tmplify(src, tmp, {
              data: tmplifyDo,
              silent: true,
              pattern: options.pattern,
              ignore: options.ignore
            });

          case 4:
            _context.next = 6;
            return render(tmp, dest, {
              data: renderDo,
              silent: options.silent,
              clean: options.clean,
              once: options.once,
              mode: options.mode
            });

          case 6:
            _context.next = 8;
            return new _promise2.default(function (resolve, reject) {
              return rimraf(tmp, function (err) {
                return err ? reject(err) : resolve();
              });
            });

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
}

function _nameTmp(dest) {
  var dirname = path.dirname(dest);
  var basename = path.basename(dest);
  return path.join(dirname, '.' + basename + '.tmp');
}

module.exports = transplant;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zcGxhbnQuanMiXSwibmFtZXMiOlsiYXJneCIsInJlcXVpcmUiLCJjbyIsInBhdGgiLCJ0bXBsaWZ5IiwicmltcmFmIiwicmVuZGVyIiwidHJhbnNwbGFudCIsInNyYyIsImRlc3QiLCJvcHRpb25zIiwiYXJncyIsImFyZ3VtZW50cyIsInBvcCIsIkVycm9yIiwidG1wIiwiX25hbWVUbXAiLCJ0bXBsaWZ5RG8iLCJyZW5kZXJEbyIsInJ1bGUiLCJmb3JFYWNoIiwiaSIsImtleSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnIiLCJkYXRhIiwic2lsZW50IiwicGF0dGVybiIsImlnbm9yZSIsImNsZWFuIiwib25jZSIsIm1vZGUiLCJkaXJuYW1lIiwiYmFzZW5hbWUiLCJqb2luIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBOzs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNQyxLQUFLRCxRQUFRLElBQVIsQ0FBWDtBQUNBLElBQU1FLE9BQU9GLFFBQVEsTUFBUixDQUFiO0FBQ0EsSUFBTUcsVUFBVUgsUUFBUSxXQUFSLENBQWhCO0FBQ0EsSUFBTUksU0FBU0osUUFBUSxRQUFSLENBQWY7QUFDQSxJQUFNSyxTQUFTTCxRQUFRLFVBQVIsQ0FBZjs7QUFFQTtBQUNBLFNBQVNNLFVBQVQsQ0FBcUJDLEdBQXJCLEVBQTBCQyxJQUExQixFQUFnQ0MsT0FBaEMsRUFBeUM7QUFDdkMsTUFBSUMsT0FBT1gsS0FBS1ksU0FBTCxDQUFYO0FBQ0EsTUFBSUQsS0FBS0UsR0FBTCxDQUFTLFVBQVQsQ0FBSixFQUEwQjtBQUN4QixVQUFNLElBQUlDLEtBQUosQ0FBVSxpRUFBVixDQUFOO0FBQ0Q7QUFDREosWUFBVUMsS0FBS0UsR0FBTCxDQUFTLFFBQVQsS0FBc0IsRUFBaEM7O0FBRUEsTUFBSUUsTUFBTUMsU0FBU1AsSUFBVCxDQUFWO0FBQ0EsTUFBSVEsWUFBWSxFQUFoQjtBQUFBLE1BQ0VDLFdBQVcsRUFEYjtBQUVBLE1BQUlDLE9BQU9ULFFBQVFTLElBQVIsSUFBZ0IsRUFBM0I7QUFDQSxzQkFBWUEsSUFBWixFQUFrQkMsT0FBbEIsQ0FBMEIsVUFBQ1osR0FBRCxFQUFNYSxDQUFOLEVBQVk7QUFDcEMsUUFBSUMsTUFBTSxTQUFTRCxDQUFuQjtBQUNBSixjQUFXSyxHQUFYLElBQW1CZCxHQUFuQjtBQUNBVSxhQUFVSSxHQUFWLElBQWtCSCxLQUFNWCxHQUFOLENBQWxCO0FBQ0QsR0FKRDtBQUtBLFNBQU9OLDhCQUFHO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQUNGLHNCQUFZLFVBQUNxQixPQUFELEVBQVVDLE1BQVY7QUFBQSxxQkFDaEJuQixPQUFPVSxHQUFQLEVBQVksVUFBQ1UsR0FBRDtBQUFBLHVCQUFTQSxNQUFNRCxPQUFPQyxHQUFQLENBQU4sR0FBb0JGLFNBQTdCO0FBQUEsZUFBWixDQURnQjtBQUFBLGFBQVosQ0FERTs7QUFBQTtBQUFBO0FBQUEsbUJBSUZuQixRQUFRSSxHQUFSLEVBQWFPLEdBQWIsRUFBa0I7QUFDdEJXLG9CQUFNVCxTQURnQjtBQUV0QlUsc0JBQVEsSUFGYztBQUd0QkMsdUJBQVNsQixRQUFRa0IsT0FISztBQUl0QkMsc0JBQVFuQixRQUFRbUI7QUFKTSxhQUFsQixDQUpFOztBQUFBO0FBQUE7QUFBQSxtQkFVRnZCLE9BQU9TLEdBQVAsRUFBWU4sSUFBWixFQUFrQjtBQUN0QmlCLG9CQUFNUixRQURnQjtBQUV0QlMsc0JBQVFqQixRQUFRaUIsTUFGTTtBQUd0QkcscUJBQU9wQixRQUFRb0IsS0FITztBQUl0QkMsb0JBQU1yQixRQUFRcUIsSUFKUTtBQUt0QkMsb0JBQU10QixRQUFRc0I7QUFMUSxhQUFsQixDQVZFOztBQUFBO0FBQUE7QUFBQSxtQkFpQkYsc0JBQVksVUFBQ1QsT0FBRCxFQUFVQyxNQUFWO0FBQUEscUJBQ2hCbkIsT0FBT1UsR0FBUCxFQUFZLFVBQUNVLEdBQUQ7QUFBQSx1QkFBU0EsTUFBTUQsT0FBT0MsR0FBUCxDQUFOLEdBQW9CRixTQUE3QjtBQUFBLGVBQVosQ0FEZ0I7QUFBQSxhQUFaLENBakJFOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQUgsRUFBUDtBQXFCRDs7QUFFRCxTQUFTUCxRQUFULENBQW1CUCxJQUFuQixFQUF5QjtBQUN2QixNQUFJd0IsVUFBVTlCLEtBQUs4QixPQUFMLENBQWF4QixJQUFiLENBQWQ7QUFDQSxNQUFJeUIsV0FBVy9CLEtBQUsrQixRQUFMLENBQWN6QixJQUFkLENBQWY7QUFDQSxTQUFPTixLQUFLZ0MsSUFBTCxDQUFVRixPQUFWLEVBQW1CLE1BQU1DLFFBQU4sR0FBaUIsTUFBcEMsQ0FBUDtBQUNEOztBQUVERSxPQUFPQyxPQUFQLEdBQWlCOUIsVUFBakIiLCJmaWxlIjoidHJhbnNwbGFudC5qcyIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRtcGxpZnkgYW5kIHJlbmRlciBhdCBvbmNlLlxuICogQG1lbWJlcm9mIG1vZHVsZTp0bXBsY29udi9saWJcbiAqIEBmdW5jdGlvbiB0cmFuc3BsYW50XG4gKiBAcGFyYW0ge3N0cmluZ30gc3JjIC0gTmFtZSBvZiBkZXN0aW5hdGlvbiBkaXJlY3RvcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGVzdCAtIE5hbWUgb2YgZGVzdGluYXRpb24gZGlyZWN0b3J5LCB3aGljaCBjb250YWlucyB0ZW1wbGF0ZSBmaWxlcy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MuXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IG9wdGlvbnMucnVsZSAtIFJ1bGUgZm9yIGNvbnZlcnQuXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gb3B0aW9ucy5wYXR0ZXJuIC0gU291cmNlIHBhdHRlcm5zLlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IFtvcHRpb25zLmlnbm9yZV0gLSBGaWxlbmFtZSBwYXR0ZXJuLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5zaWxlbnQ9ZmFsc2VdIC0gU2lsZW50IG9yIG5vdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5tb2RlPSc2NDQnXSAtIEZpbGUgcGVybWlzc2lvbiB0byBnZW5lcmF0ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2xlYW49ZmFsc2VdIC0gQ2xlYW51cCBkZXN0aW5hdGlvbiBkaXJlY3RvcnkgYmVmb3JlIGNvbnZlcnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLm9uY2U9ZmFsc2VdIC0gV3JpdGUgb25seSBmaXJzdCB0aW1lLiBTa2lwIGlmIGFscmVhZHkgZXhpc3RzLlxuICogQHJldHVybnMge1Byb21pc2V9XG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGFyZ3ggPSByZXF1aXJlKCdhcmd4JylcbmNvbnN0IGNvID0gcmVxdWlyZSgnY28nKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB0bXBsaWZ5ID0gcmVxdWlyZSgnLi90bXBsaWZ5Jyk7XG5jb25zdCByaW1yYWYgPSByZXF1aXJlKCdyaW1yYWYnKTtcbmNvbnN0IHJlbmRlciA9IHJlcXVpcmUoJy4vcmVuZGVyJyk7XG5cbi8qKiBAbGVuZHMgdHJhbnNwbGFudCAqL1xuZnVuY3Rpb24gdHJhbnNwbGFudCAoc3JjLCBkZXN0LCBvcHRpb25zKSB7XG4gIGxldCBhcmdzID0gYXJneChhcmd1bWVudHMpXG4gIGlmIChhcmdzLnBvcCgnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gVXNlIHByb21pc2UgaW50ZXJmYWNlIGluc3RlYWQuJylcbiAgfVxuICBvcHRpb25zID0gYXJncy5wb3AoJ29iamVjdCcpIHx8IHt9XG5cbiAgbGV0IHRtcCA9IF9uYW1lVG1wKGRlc3QpXG4gIGxldCB0bXBsaWZ5RG8gPSB7fSxcbiAgICByZW5kZXJEbyA9IHt9XG4gIGxldCBydWxlID0gb3B0aW9ucy5ydWxlIHx8IHt9XG4gIE9iamVjdC5rZXlzKHJ1bGUpLmZvckVhY2goKHNyYywgaSkgPT4ge1xuICAgIGxldCBrZXkgPSAna2V5XycgKyBpO1xuICAgIHRtcGxpZnlEb1sga2V5IF0gPSBzcmM7XG4gICAgcmVuZGVyRG9bIGtleSBdID0gcnVsZVsgc3JjIF07XG4gIH0pXG4gIHJldHVybiBjbyhmdW5jdGlvbiAqICgpIHtcbiAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgcmltcmFmKHRtcCwgKGVycikgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCkpXG4gICAgKVxuICAgIHlpZWxkIHRtcGxpZnkoc3JjLCB0bXAsIHtcbiAgICAgIGRhdGE6IHRtcGxpZnlEbyxcbiAgICAgIHNpbGVudDogdHJ1ZSxcbiAgICAgIHBhdHRlcm46IG9wdGlvbnMucGF0dGVybixcbiAgICAgIGlnbm9yZTogb3B0aW9ucy5pZ25vcmVcbiAgICB9KVxuICAgIHlpZWxkIHJlbmRlcih0bXAsIGRlc3QsIHtcbiAgICAgIGRhdGE6IHJlbmRlckRvLFxuICAgICAgc2lsZW50OiBvcHRpb25zLnNpbGVudCxcbiAgICAgIGNsZWFuOiBvcHRpb25zLmNsZWFuLFxuICAgICAgb25jZTogb3B0aW9ucy5vbmNlLFxuICAgICAgbW9kZTogb3B0aW9ucy5tb2RlXG4gICAgfSlcbiAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgcmltcmFmKHRtcCwgKGVycikgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCkpXG4gICAgKVxuICB9KVxufVxuXG5mdW5jdGlvbiBfbmFtZVRtcCAoZGVzdCkge1xuICBsZXQgZGlybmFtZSA9IHBhdGguZGlybmFtZShkZXN0KVxuICBsZXQgYmFzZW5hbWUgPSBwYXRoLmJhc2VuYW1lKGRlc3QpO1xuICByZXR1cm4gcGF0aC5qb2luKGRpcm5hbWUsICcuJyArIGJhc2VuYW1lICsgJy50bXAnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyYW5zcGxhbnRcbiJdfQ==