/**
 * Convert files in a directory.
 * @function convertDir
 * @param {string} src - Source directory path.
 * @param {string} dest - Destination directory path.
 * @param {object} [options] - Optional settings.
 * @param {string|string[]} [options.pattern] - Filename pattern.
 * @param {string|string[]} [options.ignore] - Filename pattern.
 * @param {string} [options.mode='644'] - File permission to generate.
 * @param {boolean} [options.once=false] - Write only first time. Skip if already exists.
 * @param {object} [options.rule] - Convert map.
 * @returns {Promise}
 */

'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var co = require('co');

var _require = require('asfs');

var existsAsync = _require.existsAsync;
var statAsync = _require.statAsync;

var convertDir = require('./convert_dir');
var convertFile = require('./convert_file');

/** @lends convert */
function convert(src, dest) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  return co(_regenerator2.default.mark(function _callee() {
    var exists, stats, isDir;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return existsAsync(src);

          case 2:
            exists = _context.sent;

            if (exists) {
              _context.next = 5;
              break;
            }

            throw new Error('src not exists: ' + src);

          case 5:
            _context.next = 7;
            return statAsync(src);

          case 7:
            stats = _context.sent;
            isDir = stats.isDirectory();

            if (!isDir) {
              _context.next = 15;
              break;
            }

            _context.next = 12;
            return convertDir(src, dest, options);

          case 12:
            return _context.abrupt('return', _context.sent);

          case 15:
            _context.next = 17;
            return convertFile(src, dest, options);

          case 17:
            return _context.abrupt('return', _context.sent);

          case 18:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
}

module.exports = convert;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnZlcnQuanMiXSwibmFtZXMiOlsiY28iLCJyZXF1aXJlIiwiZXhpc3RzQXN5bmMiLCJzdGF0QXN5bmMiLCJjb252ZXJ0RGlyIiwiY29udmVydEZpbGUiLCJjb252ZXJ0Iiwic3JjIiwiZGVzdCIsIm9wdGlvbnMiLCJleGlzdHMiLCJFcnJvciIsInN0YXRzIiwiaXNEaXIiLCJpc0RpcmVjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OztBQWNBOzs7Ozs7OztBQUVBLElBQU1BLEtBQUtDLFFBQVEsSUFBUixDQUFYOztlQUNtQ0EsUUFBUSxNQUFSLEM7O0lBQTNCQyxXLFlBQUFBLFc7SUFBYUMsUyxZQUFBQSxTOztBQUNyQixJQUFNQyxhQUFhSCxRQUFRLGVBQVIsQ0FBbkI7QUFDQSxJQUFNSSxjQUFjSixRQUFRLGdCQUFSLENBQXBCOztBQUVBO0FBQ0EsU0FBU0ssT0FBVCxDQUFrQkMsR0FBbEIsRUFBdUJDLElBQXZCLEVBQTJDO0FBQUEsTUFBZEMsT0FBYyx5REFBSixFQUFJOztBQUN6QyxTQUFPVCw4QkFBRztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQUNXRSxZQUFZSyxHQUFaLENBRFg7O0FBQUE7QUFDSkcsa0JBREk7O0FBQUEsZ0JBRUhBLE1BRkc7QUFBQTtBQUFBO0FBQUE7O0FBQUEsa0JBR0EsSUFBSUMsS0FBSixzQkFBNkJKLEdBQTdCLENBSEE7O0FBQUE7QUFBQTtBQUFBLG1CQUtVSixVQUFVSSxHQUFWLENBTFY7O0FBQUE7QUFLSkssaUJBTEk7QUFNSkMsaUJBTkksR0FNSUQsTUFBTUUsV0FBTixFQU5KOztBQUFBLGlCQU9KRCxLQVBJO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUEsbUJBUU9ULFdBQVdHLEdBQVgsRUFBZ0JDLElBQWhCLEVBQXNCQyxPQUF0QixDQVJQOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBLG1CQVVPSixZQUFZRSxHQUFaLEVBQWlCQyxJQUFqQixFQUF1QkMsT0FBdkIsQ0FWUDs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQUgsRUFBUDtBQWFEOztBQUVETSxPQUFPQyxPQUFQLEdBQWlCVixPQUFqQiIsImZpbGUiOiJjb252ZXJ0LmpzIiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydCBmaWxlcyBpbiBhIGRpcmVjdG9yeS5cbiAqIEBmdW5jdGlvbiBjb252ZXJ0RGlyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3JjIC0gU291cmNlIGRpcmVjdG9yeSBwYXRoLlxuICogQHBhcmFtIHtzdHJpbmd9IGRlc3QgLSBEZXN0aW5hdGlvbiBkaXJlY3RvcnkgcGF0aC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbb3B0aW9ucy5wYXR0ZXJuXSAtIEZpbGVuYW1lIHBhdHRlcm4uXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gW29wdGlvbnMuaWdub3JlXSAtIEZpbGVuYW1lIHBhdHRlcm4uXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubW9kZT0nNjQ0J10gLSBGaWxlIHBlcm1pc3Npb24gdG8gZ2VuZXJhdGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLm9uY2U9ZmFsc2VdIC0gV3JpdGUgb25seSBmaXJzdCB0aW1lLiBTa2lwIGlmIGFscmVhZHkgZXhpc3RzLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLnJ1bGVdIC0gQ29udmVydCBtYXAuXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgY28gPSByZXF1aXJlKCdjbycpXG5jb25zdCB7IGV4aXN0c0FzeW5jLCBzdGF0QXN5bmMgfSA9IHJlcXVpcmUoJ2FzZnMnKVxuY29uc3QgY29udmVydERpciA9IHJlcXVpcmUoJy4vY29udmVydF9kaXInKVxuY29uc3QgY29udmVydEZpbGUgPSByZXF1aXJlKCcuL2NvbnZlcnRfZmlsZScpXG5cbi8qKiBAbGVuZHMgY29udmVydCAqL1xuZnVuY3Rpb24gY29udmVydCAoc3JjLCBkZXN0LCBvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIGNvKGZ1bmN0aW9uICogKCkge1xuICAgIGxldCBleGlzdHMgPSB5aWVsZCBleGlzdHNBc3luYyhzcmMpXG4gICAgaWYgKCFleGlzdHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgc3JjIG5vdCBleGlzdHM6ICR7c3JjfWApXG4gICAgfVxuICAgIGxldCBzdGF0cyA9IHlpZWxkIHN0YXRBc3luYyhzcmMpXG4gICAgbGV0IGlzRGlyID0gc3RhdHMuaXNEaXJlY3RvcnkoKVxuICAgIGlmIChpc0Rpcikge1xuICAgICAgcmV0dXJuIHlpZWxkIGNvbnZlcnREaXIoc3JjLCBkZXN0LCBvcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4geWllbGQgY29udmVydEZpbGUoc3JjLCBkZXN0LCBvcHRpb25zKVxuICAgIH1cbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0XG4iXX0=