/**
 * Colorpint context.
 * @memberof module:colorprint/lib
 * @inner
 * @constructor Colorprint
 * @param {object} config - Context configuration.
 */

'use strict'

const formatMsg = require('./msg/format_msg')
const decorateMsg = require('./msg/decorate_msg')
const indentMsg = require('./msg/indent_msg')

/** @lends module:colorprint/lib~Colorprint */
function Colorprint () {
  const s = this
  s.init.apply(s, arguments)
}

Colorprint.prototype = {
  disabled: false,
  prepareMsg () {
    const s = this
    let msg = formatMsg.apply(formatMsg, arguments)
    return [s.PREFIX, indentMsg(msg, s.indent), s.SUFFIX].join('')
  },
  writeToStdout (msg, color) {
    const s = this
    if (s.disabled) {
      return
    }
    console.log(decorateMsg(msg, color))
  },
  writeToStderr (msg, color) {
    console.error(decorateMsg(msg, color))
  },
{{#each levels}}
  /** Color for {{lowercase @key}} print. */
  {{uppercase @key}}_COLOR: '{{color}}',
{{/each}}
{{#each levels}}
  /** Alias for module:colorprint/lib~Colorprint#{{lowercase @key}}. */
  {{uppercase @key}} () {
    const s = this
    s.{{lowercase @key}}.apply(s, arguments)
  },
{{/each}}
  /** @constructs module:colorprint/lib~Colorprint */
  init (config = {}) {
    const s = this
    Object.assign(s, config)
    s.PREFIX = config.prefix || s.PREFIX
    s.SUFFIX = config.suffix || s.SUFFIX
  },
  /** Number of indent */
  indent: 0,
  /** Message prefix */
  PREFIX: '',
  /** Message suffix */
  SUFFIX: '',
{{#each levels}}
  /**
   * Print {{lowercase @key}} message.
   * @param {...string} msg - Message to print.
   */
  {{lowercase @key}} (msg) {
    const s = this
    s.{{#if error}}writeToStderr{{else}}writeToStdout{{/if}}(s.prepareMsg.apply(s, arguments), s.{{uppercase @key}}_COLOR)
  }{{#if @last}}{{else}},{{/if}}
{{/each}}
}

module.exports = Colorprint
