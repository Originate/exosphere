/**
 * Colorpint context.
 * @memberof module:colorprint/lib
 * @inner
 * @constructor Colorprint
 * @param {object} config - Context configuration.
 */

'use strict';

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var formatMsg = require('./msg/format_msg');
var decorateMsg = require('./msg/decorate_msg');
var indentMsg = require('./msg/indent_msg');

/** @lends module:colorprint/lib~Colorprint */
function Colorprint() {
  var s = this;
  s.init.apply(s, arguments);
}

Colorprint.prototype = {
  disabled: false,
  prepareMsg: function prepareMsg() {
    var s = this;
    var msg = formatMsg.apply(formatMsg, arguments);
    return [s.PREFIX, indentMsg(msg, s.indent), s.SUFFIX].join('');
  },
  writeToStdout: function writeToStdout(msg, color) {
    var s = this;
    if (s.disabled) {
      return;
    }
    console.log(decorateMsg(msg, color));
  },
  writeToStderr: function writeToStderr(msg, color) {
    console.error(decorateMsg(msg, color));
  },

  /** Color for point print. */
  POINT_COLOR: 'blue',
  /** Color for notice print. */
  NOTICE_COLOR: 'magenta',
  /** Color for info print. */
  INFO_COLOR: 'green',
  /** Color for debug print. */
  DEBUG_COLOR: '',
  /** Color for trace print. */
  TRACE_COLOR: 'white',
  /** Color for warn print. */
  WARN_COLOR: 'yellow',
  /** Color for error print. */
  ERROR_COLOR: 'red',
  /** Color for fatal print. */
  FATAL_COLOR: 'bgRed',
  /** Alias for module:colorprint/lib~Colorprint#point. */
  POINT: function POINT() {
    var s = this;
    s.point.apply(s, arguments);
  },

  /** Alias for module:colorprint/lib~Colorprint#notice. */
  NOTICE: function NOTICE() {
    var s = this;
    s.notice.apply(s, arguments);
  },

  /** Alias for module:colorprint/lib~Colorprint#info. */
  INFO: function INFO() {
    var s = this;
    s.info.apply(s, arguments);
  },

  /** Alias for module:colorprint/lib~Colorprint#debug. */
  DEBUG: function DEBUG() {
    var s = this;
    s.debug.apply(s, arguments);
  },

  /** Alias for module:colorprint/lib~Colorprint#trace. */
  TRACE: function TRACE() {
    var s = this;
    s.trace.apply(s, arguments);
  },

  /** Alias for module:colorprint/lib~Colorprint#warn. */
  WARN: function WARN() {
    var s = this;
    s.warn.apply(s, arguments);
  },

  /** Alias for module:colorprint/lib~Colorprint#error. */
  ERROR: function ERROR() {
    var s = this;
    s.error.apply(s, arguments);
  },

  /** Alias for module:colorprint/lib~Colorprint#fatal. */
  FATAL: function FATAL() {
    var s = this;
    s.fatal.apply(s, arguments);
  },

  /** @constructs module:colorprint/lib~Colorprint */
  init: function init() {
    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var s = this;
    (0, _assign2.default)(s, config);
    s.PREFIX = config.prefix || s.PREFIX;
    s.SUFFIX = config.suffix || s.SUFFIX;
  },

  /** Number of indent */
  indent: 0,
  /** Message prefix */
  PREFIX: '',
  /** Message suffix */
  SUFFIX: '',
  /**
   * Print point message.
   * @param {...string} msg - Message to print.
   */
  point: function point(msg) {
    var s = this;
    s.writeToStdout(s.prepareMsg.apply(s, arguments), s.POINT_COLOR);
  },

  /**
   * Print notice message.
   * @param {...string} msg - Message to print.
   */
  notice: function notice(msg) {
    var s = this;
    s.writeToStdout(s.prepareMsg.apply(s, arguments), s.NOTICE_COLOR);
  },

  /**
   * Print info message.
   * @param {...string} msg - Message to print.
   */
  info: function info(msg) {
    var s = this;
    s.writeToStdout(s.prepareMsg.apply(s, arguments), s.INFO_COLOR);
  },

  /**
   * Print debug message.
   * @param {...string} msg - Message to print.
   */
  debug: function debug(msg) {
    var s = this;
    s.writeToStdout(s.prepareMsg.apply(s, arguments), s.DEBUG_COLOR);
  },

  /**
   * Print trace message.
   * @param {...string} msg - Message to print.
   */
  trace: function trace(msg) {
    var s = this;
    s.writeToStdout(s.prepareMsg.apply(s, arguments), s.TRACE_COLOR);
  },

  /**
   * Print warn message.
   * @param {...string} msg - Message to print.
   */
  warn: function warn(msg) {
    var s = this;
    s.writeToStdout(s.prepareMsg.apply(s, arguments), s.WARN_COLOR);
  },

  /**
   * Print error message.
   * @param {...string} msg - Message to print.
   */
  error: function error(msg) {
    var s = this;
    s.writeToStderr(s.prepareMsg.apply(s, arguments), s.ERROR_COLOR);
  },

  /**
   * Print fatal message.
   * @param {...string} msg - Message to print.
   */
  fatal: function fatal(msg) {
    var s = this;
    s.writeToStderr(s.prepareMsg.apply(s, arguments), s.FATAL_COLOR);
  }
};

module.exports = Colorprint;
//# sourceMappingURL=data:application/json;base64,