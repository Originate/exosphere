/**
 * @augments AKV
 * @class AKVStatus
 */
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('akv');

var AKV = _require.AKV;
var fileHash = _require.fileHash;

var aglob = require('aglob');
var co = require('co');

/** @lends AKVStatus */

var AKVStatus = function (_AKV) {
  (0, _inherits3.default)(AKVStatus, _AKV);

  function AKVStatus(filename, options) {
    (0, _classCallCheck3.default)(this, AKVStatus);
    return (0, _possibleConstructorReturn3.default)(this, (AKVStatus.__proto__ || (0, _getPrototypeOf2.default)(AKVStatus)).call(this, filename, options));
  }

  /**
   * Detect unknown status data
   * @param {string[]} filenames
   * @returns {Promise}
   */


  (0, _createClass3.default)(AKVStatus, [{
    key: 'filterStatusUnknown',
    value: function filterStatusUnknown(filenames) {
      var s = this;
      return co(_regenerator2.default.mark(function _callee() {
        var filtered, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, filename, knownHash, hash, known;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                filtered = [];
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context.prev = 4;
                _iterator = (0, _getIterator3.default)(filenames);

              case 6:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context.next = 19;
                  break;
                }

                filename = _step.value;
                _context.next = 10;
                return s.get(filename);

              case 10:
                knownHash = _context.sent;
                _context.next = 13;
                return fileHash(filename);

              case 13:
                hash = _context.sent;
                known = hash && knownHash && hash === knownHash;

                if (!known) {
                  filtered.push(filename);
                }

              case 16:
                _iteratorNormalCompletion = true;
                _context.next = 6;
                break;

              case 19:
                _context.next = 25;
                break;

              case 21:
                _context.prev = 21;
                _context.t0 = _context['catch'](4);
                _didIteratorError = true;
                _iteratorError = _context.t0;

              case 25:
                _context.prev = 25;
                _context.prev = 26;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 28:
                _context.prev = 28;

                if (!_didIteratorError) {
                  _context.next = 31;
                  break;
                }

                throw _iteratorError;

              case 31:
                return _context.finish(28);

              case 32:
                return _context.finish(25);

              case 33:
                return _context.abrupt('return', filtered);

              case 34:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[4, 21, 25, 33], [26,, 28, 32]]);
      }));
    }

    /**
     * @param {string[]} filenames
     * @returns {*|Promise}
     */

  }, {
    key: 'saveStatus',
    value: function saveStatus(filenames) {
      var s = this;
      return co(_regenerator2.default.mark(function _callee2() {
        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, filename, hash;

        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context2.prev = 3;
                _iterator2 = (0, _getIterator3.default)(filenames);

              case 5:
                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                  _context2.next = 15;
                  break;
                }

                filename = _step2.value;
                _context2.next = 9;
                return fileHash(filename);

              case 9:
                hash = _context2.sent;
                _context2.next = 12;
                return s.set(filename, hash);

              case 12:
                _iteratorNormalCompletion2 = true;
                _context2.next = 5;
                break;

              case 15:
                _context2.next = 21;
                break;

              case 17:
                _context2.prev = 17;
                _context2.t0 = _context2['catch'](3);
                _didIteratorError2 = true;
                _iteratorError2 = _context2.t0;

              case 21:
                _context2.prev = 21;
                _context2.prev = 22;

                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }

              case 24:
                _context2.prev = 24;

                if (!_didIteratorError2) {
                  _context2.next = 27;
                  break;
                }

                throw _iteratorError2;

              case 27:
                return _context2.finish(24);

              case 28:
                return _context2.finish(21);

              case 29:
                _context2.next = 31;
                return s.commit();

              case 31:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[3, 17, 21, 29], [22,, 24, 28]]);
      }));
    }
  }]);
  return AKVStatus;
}(AKV);

module.exports = AKVStatus;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFrdl9zdGF0dXMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkFLViIsImZpbGVIYXNoIiwiYWdsb2IiLCJjbyIsIkFLVlN0YXR1cyIsImZpbGVuYW1lIiwib3B0aW9ucyIsImZpbGVuYW1lcyIsInMiLCJmaWx0ZXJlZCIsImdldCIsImtub3duSGFzaCIsImhhc2giLCJrbm93biIsInB1c2giLCJzZXQiLCJjb21taXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQUUwQkEsUUFBUSxLQUFSLEM7O0lBQWxCQyxHLFlBQUFBLEc7SUFBS0MsUSxZQUFBQSxROztBQUNiLElBQU1DLFFBQVFILFFBQVEsT0FBUixDQUFkO0FBQ0EsSUFBTUksS0FBS0osUUFBUSxJQUFSLENBQVg7O0FBRUE7O0lBQ01LLFM7OztBQUNKLHFCQUFhQyxRQUFiLEVBQXVCQyxPQUF2QixFQUFnQztBQUFBO0FBQUEsdUlBQ3hCRCxRQUR3QixFQUNkQyxPQURjO0FBRS9COztBQUVEOzs7Ozs7Ozs7d0NBS3FCQyxTLEVBQVc7QUFDOUIsVUFBTUMsSUFBSSxJQUFWO0FBQ0EsYUFBT0wsOEJBQUc7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNKTSx3QkFESSxHQUNPLEVBRFA7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVEQUVhRixTQUZiOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBRUNGLHdCQUZEO0FBQUE7QUFBQSx1QkFHZ0JHLEVBQUVFLEdBQUYsQ0FBTUwsUUFBTixDQUhoQjs7QUFBQTtBQUdGTSx5QkFIRTtBQUFBO0FBQUEsdUJBSVdWLFNBQVNJLFFBQVQsQ0FKWDs7QUFBQTtBQUlGTyxvQkFKRTtBQUtGQyxxQkFMRSxHQUtNRCxRQUFRRCxTQUFSLElBQXNCQyxTQUFTRCxTQUxyQzs7QUFNTixvQkFBSSxDQUFDRSxLQUFMLEVBQVk7QUFDVkosMkJBQVNLLElBQVQsQ0FBY1QsUUFBZDtBQUNEOztBQVJLO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQSxpREFVREksUUFWQzs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQUFILEVBQVA7QUFZRDs7QUFFRDs7Ozs7OzsrQkFJWUYsUyxFQUFXO0FBQ3JCLFVBQU1DLElBQUksSUFBVjtBQUNBLGFBQU9MLDhCQUFHO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHdEQUNhSSxTQURiOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQ0NGLHdCQUREO0FBQUE7QUFBQSx1QkFFV0osU0FBU0ksUUFBVCxDQUZYOztBQUFBO0FBRUZPLG9CQUZFO0FBQUE7QUFBQSx1QkFHQUosRUFBRU8sR0FBRixDQUFNVixRQUFOLEVBQWdCTyxJQUFoQixDQUhBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBLHVCQUtGSixFQUFFUSxNQUFGLEVBTEU7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FBSCxFQUFQO0FBT0Q7OztFQXZDcUJoQixHOztBQTBDeEJpQixPQUFPQyxPQUFQLEdBQWlCZCxTQUFqQiIsImZpbGUiOiJha3Zfc3RhdHVzLmpzIiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGF1Z21lbnRzIEFLVlxuICogQGNsYXNzIEFLVlN0YXR1c1xuICovXG4ndXNlIHN0cmljdCdcblxuY29uc3QgeyBBS1YsIGZpbGVIYXNoIH0gPSByZXF1aXJlKCdha3YnKVxuY29uc3QgYWdsb2IgPSByZXF1aXJlKCdhZ2xvYicpXG5jb25zdCBjbyA9IHJlcXVpcmUoJ2NvJylcblxuLyoqIEBsZW5kcyBBS1ZTdGF0dXMgKi9cbmNsYXNzIEFLVlN0YXR1cyBleHRlbmRzIEFLViB7XG4gIGNvbnN0cnVjdG9yIChmaWxlbmFtZSwgb3B0aW9ucykge1xuICAgIHN1cGVyKGZpbGVuYW1lLCBvcHRpb25zKVxuICB9XG5cbiAgLyoqXG4gICAqIERldGVjdCB1bmtub3duIHN0YXR1cyBkYXRhXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGZpbGVuYW1lc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIGZpbHRlclN0YXR1c1Vua25vd24gKGZpbGVuYW1lcykge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgcmV0dXJuIGNvKGZ1bmN0aW9uICogKCkge1xuICAgICAgbGV0IGZpbHRlcmVkID0gW11cbiAgICAgIGZvciAobGV0IGZpbGVuYW1lIG9mIGZpbGVuYW1lcykge1xuICAgICAgICBsZXQga25vd25IYXNoID0geWllbGQgcy5nZXQoZmlsZW5hbWUpXG4gICAgICAgIGxldCBoYXNoID0geWllbGQgZmlsZUhhc2goZmlsZW5hbWUpXG4gICAgICAgIGxldCBrbm93biA9IGhhc2ggJiYga25vd25IYXNoICYmIChoYXNoID09PSBrbm93bkhhc2gpXG4gICAgICAgIGlmICgha25vd24pIHtcbiAgICAgICAgICBmaWx0ZXJlZC5wdXNoKGZpbGVuYW1lKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmlsdGVyZWRcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGZpbGVuYW1lc1xuICAgKiBAcmV0dXJucyB7KnxQcm9taXNlfVxuICAgKi9cbiAgc2F2ZVN0YXR1cyAoZmlsZW5hbWVzKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICByZXR1cm4gY28oZnVuY3Rpb24gKiAoKSB7XG4gICAgICBmb3IgKGxldCBmaWxlbmFtZSBvZiBmaWxlbmFtZXMpIHtcbiAgICAgICAgbGV0IGhhc2ggPSB5aWVsZCBmaWxlSGFzaChmaWxlbmFtZSlcbiAgICAgICAgeWllbGQgcy5zZXQoZmlsZW5hbWUsIGhhc2gpXG4gICAgICB9XG4gICAgICB5aWVsZCBzLmNvbW1pdCgpXG4gICAgfSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFLVlN0YXR1c1xuIl19