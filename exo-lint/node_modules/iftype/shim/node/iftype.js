/**
 * Type check instance.
 * @constructor Iftype
 * @param {*} value - Value to check.
 */

'use strict';

var is = require('./is');

/** @lends Iftype */
function Iftype(val) {
  var s = this;
  s.val(val);
}

Iftype.prototype = {
  /**
   * Detect type matches.
   * @param {string} type
   * @returns {boolean} - Type matches or not.
   */
  is: function typeIs(type) {
    var s = this;
    return is(type, s.val());
  },
  /**
   * Detect if string.
   * @returns {boolean} - Type matches or not.
   */
  isString: function isStringType() {
    var s = this;
    return s.is('string');
  },
  /**
   * Detect if number.
   * @returns {boolean} - Type matches or not.
   */
  isNumber: function isNumberType() {
    var s = this;
    return s.is('number');
  },
  /**
   * Detect if object.
   * @returns {boolean} - Type matches or not.
   */
  isObject: function isObjectType() {
    var s = this;
    return s.is('object');
  },
  /**
   * Detect if array.
   * @returns {boolean} - Type matches or not.
   */
  isArray: function isArrayType() {
    var s = this;
    return s.is('array');
  },
  /**
   * Detect if function.
   * @returns {boolean} - Type matches or not.
   */
  isFunction: function isFunctionType() {
    var s = this;
    return s.is('function');
  },
  val: function val(_val) {
    var s = this;
    if (arguments.length === 0) {
      return s._val;
    }
    s._val = _val;
    return s;
  }
};

module.exports = Iftype;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlmdHlwZS5qcyJdLCJuYW1lcyI6WyJpcyIsInJlcXVpcmUiLCJJZnR5cGUiLCJ2YWwiLCJzIiwicHJvdG90eXBlIiwidHlwZUlzIiwidHlwZSIsImlzU3RyaW5nIiwiaXNTdHJpbmdUeXBlIiwiaXNOdW1iZXIiLCJpc051bWJlclR5cGUiLCJpc09iamVjdCIsImlzT2JqZWN0VHlwZSIsImlzQXJyYXkiLCJpc0FycmF5VHlwZSIsImlzRnVuY3Rpb24iLCJpc0Z1bmN0aW9uVHlwZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsIl92YWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBTUE7O0FBRUEsSUFBTUEsS0FBS0MsUUFBUSxNQUFSLENBQVg7O0FBRUE7QUFDQSxTQUFTQyxNQUFULENBQWdCQyxHQUFoQixFQUFxQjtBQUNuQixNQUFNQyxJQUFJLElBQVY7QUFDQUEsSUFBRUQsR0FBRixDQUFNQSxHQUFOO0FBQ0Q7O0FBRURELE9BQU9HLFNBQVAsR0FBbUI7QUFDakI7Ozs7O0FBS0FMLE1BQUksU0FBU00sTUFBVCxDQUFnQkMsSUFBaEIsRUFBc0I7QUFDekIsUUFBTUgsSUFBSSxJQUFWO0FBQ0EsV0FBT0osR0FBR08sSUFBSCxFQUFTSCxFQUFFRCxHQUFGLEVBQVQsQ0FBUDtBQUNBLEdBVGdCO0FBVWpCOzs7O0FBSUFLLFlBQVUsU0FBU0MsWUFBVCxHQUF3QjtBQUNqQyxRQUFNTCxJQUFJLElBQVY7QUFDQSxXQUFPQSxFQUFFSixFQUFGLENBQUssUUFBTCxDQUFQO0FBQ0EsR0FqQmdCO0FBa0JqQjs7OztBQUlBVSxZQUFVLFNBQVNDLFlBQVQsR0FBd0I7QUFDakMsUUFBTVAsSUFBSSxJQUFWO0FBQ0EsV0FBT0EsRUFBRUosRUFBRixDQUFLLFFBQUwsQ0FBUDtBQUNBLEdBekJnQjtBQTBCakI7Ozs7QUFJQVksWUFBVSxTQUFTQyxZQUFULEdBQXdCO0FBQ2pDLFFBQU1ULElBQUksSUFBVjtBQUNBLFdBQU9BLEVBQUVKLEVBQUYsQ0FBSyxRQUFMLENBQVA7QUFDQSxHQWpDZ0I7QUFrQ2pCOzs7O0FBSUFjLFdBQVMsU0FBU0MsV0FBVCxHQUF1QjtBQUMvQixRQUFNWCxJQUFJLElBQVY7QUFDQSxXQUFPQSxFQUFFSixFQUFGLENBQUssT0FBTCxDQUFQO0FBQ0EsR0F6Q2dCO0FBMENqQjs7OztBQUlBZ0IsY0FBWSxTQUFTQyxjQUFULEdBQTBCO0FBQ3JDLFFBQU1iLElBQUksSUFBVjtBQUNBLFdBQU9BLEVBQUVKLEVBQUYsQ0FBSyxVQUFMLENBQVA7QUFDQSxHQWpEZ0I7QUFrRGpCRyxPQUFLLGFBQVNBLElBQVQsRUFBYTtBQUNqQixRQUFNQyxJQUFJLElBQVY7QUFDQSxRQUFJYyxVQUFVQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzNCLGFBQU9mLEVBQUVnQixJQUFUO0FBQ0E7QUFDRGhCLE1BQUVnQixJQUFGLEdBQVNqQixJQUFUO0FBQ0EsV0FBT0MsQ0FBUDtBQUNBO0FBekRnQixDQUFuQjs7QUE0REFpQixPQUFPQyxPQUFQLEdBQWlCcEIsTUFBakIiLCJmaWxlIjoiaWZ0eXBlLmpzIiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVHlwZSBjaGVjayBpbnN0YW5jZS5cbiAqIEBjb25zdHJ1Y3RvciBJZnR5cGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBjaGVjay5cbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgaXMgPSByZXF1aXJlKCcuL2lzJylcblxuLyoqIEBsZW5kcyBJZnR5cGUgKi9cbmZ1bmN0aW9uIElmdHlwZSh2YWwpIHtcbiAgY29uc3QgcyA9IHRoaXNcbiAgcy52YWwodmFsKVxufVxuXG5JZnR5cGUucHJvdG90eXBlID0ge1xuICAvKipcbiAgICogRGV0ZWN0IHR5cGUgbWF0Y2hlcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogQHJldHVybnMge2Jvb2xlYW59IC0gVHlwZSBtYXRjaGVzIG9yIG5vdC5cbiAgICovXG4gIGlzOiBmdW5jdGlvbiB0eXBlSXModHlwZSkge1xuICAgY29uc3QgcyA9IHRoaXNcbiAgIHJldHVybiBpcyh0eXBlLCBzLnZhbCgpKVxuICB9LFxuICAvKipcbiAgICogRGV0ZWN0IGlmIHN0cmluZy5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IC0gVHlwZSBtYXRjaGVzIG9yIG5vdC5cbiAgICovXG4gIGlzU3RyaW5nOiBmdW5jdGlvbiBpc1N0cmluZ1R5cGUoKSB7XG4gICBjb25zdCBzID0gdGhpc1xuICAgcmV0dXJuIHMuaXMoJ3N0cmluZycpXG4gIH0sXG4gIC8qKlxuICAgKiBEZXRlY3QgaWYgbnVtYmVyLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBUeXBlIG1hdGNoZXMgb3Igbm90LlxuICAgKi9cbiAgaXNOdW1iZXI6IGZ1bmN0aW9uIGlzTnVtYmVyVHlwZSgpIHtcbiAgIGNvbnN0IHMgPSB0aGlzXG4gICByZXR1cm4gcy5pcygnbnVtYmVyJylcbiAgfSxcbiAgLyoqXG4gICAqIERldGVjdCBpZiBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSAtIFR5cGUgbWF0Y2hlcyBvciBub3QuXG4gICAqL1xuICBpc09iamVjdDogZnVuY3Rpb24gaXNPYmplY3RUeXBlKCkge1xuICAgY29uc3QgcyA9IHRoaXNcbiAgIHJldHVybiBzLmlzKCdvYmplY3QnKVxuICB9LFxuICAvKipcbiAgICogRGV0ZWN0IGlmIGFycmF5LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBUeXBlIG1hdGNoZXMgb3Igbm90LlxuICAgKi9cbiAgaXNBcnJheTogZnVuY3Rpb24gaXNBcnJheVR5cGUoKSB7XG4gICBjb25zdCBzID0gdGhpc1xuICAgcmV0dXJuIHMuaXMoJ2FycmF5JylcbiAgfSxcbiAgLyoqXG4gICAqIERldGVjdCBpZiBmdW5jdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IC0gVHlwZSBtYXRjaGVzIG9yIG5vdC5cbiAgICovXG4gIGlzRnVuY3Rpb246IGZ1bmN0aW9uIGlzRnVuY3Rpb25UeXBlKCkge1xuICAgY29uc3QgcyA9IHRoaXNcbiAgIHJldHVybiBzLmlzKCdmdW5jdGlvbicpXG4gIH0sXG4gIHZhbDogZnVuY3Rpb24odmFsKXtcbiAgIGNvbnN0IHMgPSB0aGlzXG4gICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBzLl92YWw7XG4gICB9XG4gICBzLl92YWwgPSB2YWw7XG4gICByZXR1cm4gcztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJZnR5cGU7XG4iXX0=