#!/usr/bin/env bash

# This is the Exosphere installer script for OS X.


###############################################################################
# COMPILER INSTALLATION
#

# the compiler command-line app to look for
compiler_cli="xcodebuild"

function check_compiler_installed {
  title "CHECKING FOR COMPILER"
  compiler_path=$(which $compiler_cli)
  result=$($compiler_cli -usage 2> /dev/null)
  if [ "$?" -eq "0" ]; then
    echo "${green}found ${bold}$compiler_cli${normal}${green} at $compiler_path${normal}"
    compiler_installed=true
  else
    echo "${red}compiler not found${normal}"
  fi
}


function install_compiler {
  title "INSTALLING COMPILER"
  echo "In the window that pops up, please click on the ${bold}Get Xcode${normal} button"
  echo "to install the comand-line developer tools."
  echo
  echo "Once the installation is done, come back to this terminal window and hit ${bold}Enter${normal} to continue,"
  echo "or ${bold}Ctrl-C${normal} to exit."
  echo
  wait
  echo "Apple requires you to agree to the Xcode licence."
  echo "You have to do this yourself."
  echo "After the script finishes, please run ${bold}sudo xcodebuild -license${normal},"
  echo "work your way through the dialogs, and enter ${bold}agree${normal}."
  echo "Once you have accepted the Xcode license, please re-run this script."
}


function check_compiler_version {
  compiler_version_ok=true
}


function check_compiler_works {
  compiler_works=$compiler_installed
}



###############################################################################
# PACKAGE MANAGER INSTALLATION
#

# the package manager command-line app to look for
package_manager_cli="brew"

# how to check whether the package manager works
package_manager_check="brew doctor"


function check_package_manager_installed {
  title "CHECKING FOR PACKAGE MANAGER"
  package_manager_path=$(which $package_manager_cli)
  if [ "$?" -eq "0" ] || [ -n "$package_manager_path" ]; then
    echo "${green}found ${bold}Homebrew${normal}${green} at $package_manager_path${normal}"
    package_manager_installed=true
  else
    echo "${red}no package manager found${normal}"
  fi
}


function check_package_manager_version {
  # this is checked in check_package_manager_works
  package_manager_version_ok=true
}


function install_package_manager {
  title "INSTALLING PACKAGE MANAGER"
  echo "Press ${bold}Enter${normal} to install Homebrew"
  wait
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
}


function check_package_manager_works {
  title "VERIFYING PACKAGE MANAGER"
  $package_manager_check
  result=$?
  echo
  if [ "$result" -eq "0" ]; then
    echo "${green}the package manager works${normal}"
    package_manager_works=true
  fi
}


# Displays instructions on how to set up the package manager manually
function package_manager_setup_help {
  echo "${normal}${red}${bold}your package manager has issues (see above)${normal}"
  echo
  echo "Please resolve them before continuing."
  echo "It is important that your package manager works well."
  echo "You can run ${bold}$package_manager_check${normal} to verify they are resolved"
  echo
}



###############################################################################
# PKG-CONFIG INSTALLATION
#

function check_pkg_config_installed {
  title "CHECKING FOR PKG_CONFIG"
  if [ "$(brew ls -1 | grep -c '^pkg-config$')" -eq "1" ]; then
    echo "${green}Pkg-Config is installed via Homebrew${normal}"
    pkg_config_installed=true
  else
    echo "${red}Pkg-Config is not installed${normal}"
  fi
}


function install_pkg_config {
  title "INSTALLING PKG-CONFIG"
  echo "Press ${bold}Enter${normal} to install PKG-CONFIG on this machine via Homebrew."
  wait
  brew install pkg-config
}


function check_pkg_config_version {
  # For now we assume any version is okay
  pkg_config_version_ok=true
}

function check_pkg_config_works {
  title "VERIFYING PKG-CONFIG"
  result=$(pkg-config --version)
  if [ "$?" -eq "0" ]; then
    echo "${green}pkg-config works${normal}"
    pkg_config_works=true
  fi
}



###############################################################################
# NODE.JS INSTALLATION
#

function check_node_js_installed {
  title "CHECKING FOR NODE.JS"
  node_js_path=$(which node)
  if [ "$?" -eq "0" ] && [ -n "$node_js_path" ]; then
    node_js_installed=true
    echo "${green}found ${bold}Node.JS${normal}${green} in $node_js_path${normal}"
  else
    echo "${red}Node.JS not found${normal}"
  fi
}


function install_node_js {
  title "INSTALLING NODE.JS"
  echo "Press ${bold}Enter${normal} to install Node.JS via Homebrew"
  wait
  brew install node
}


function check_node_js_version {
  title "CHECKING NODE.JS VERSION"
  node_js_version=$(node -v)
  if [ "$?" -ne "0" ]; then
    echo "${red}Node.JS not found${normal}"
    return
  fi
  node_js_major_version=$(get_major_version "$node_js_version")
  if [ "$node_js_major_version" -ge "4" ]; then
    echo "${green}Node.JS ${bold}$node_js_version${normal}${green} is okay for Exosphere${normal}"
    node_js_version_ok=true
  fi
}


function update_node_js {
  title "UPDATING NODE.JS"
  echo "${red}Node.JS ${bold}$node_js_version${normal}${red} found.${normal}"
  echo "Exosphere needs version 4 or above."
  echo
  echo "Please uninstall your Node version, and then reinstall the latest one"
  echo "by running ${bold}brew install node${normal}."
  exit 1
}


function check_node_js_works {
  title "VERIFYING NODE.JS"
  result=$(node -e 'console.log("hello")')
  if [ "$?" -eq "0" ] && [ "$result" == "hello" ]; then
    echo "${green}Node.JS works${normal}"
    node_js_works=true
  fi
}




###############################################################################
# EXOSPHERE INSTALLATION
#

# the Exosphere command-line app to look for
exosphere_cli="exo"


function check_exosphere_installed {
  title "CHECKING FOR EXOSPHERE"
  exo_path=$(which $exosphere_cli)
  if [ "$?" -eq "0" ]; then
    echo "${green}found ${bold}Exosphere${normal}${green} in $exo_path${normal}"
    exosphere_installed=true
  else
    echo "${red}Exosphere not installed${normal}"
  fi
}


function install_exosphere {
  title "INSTALLING EXOSPHERE"
  echo "Press ${bold}Enter${normal} to install Exosphere"
  wait
  npm install --global exosphere-sdk
}


function check_exosphere_version {
  exosphere_version_ok=true
}


function check_exosphere_works {
  title "VERIFYING EXOSPHERE"
  result=$(exo -v)
  if [ "$?" -eq "0" ]; then
    echo "${green}Exosphere works${normal}"
    exosphere_works=true
  fi
}



###############################################################################
# INTERNAL CODE
#

bold=$(tput bold)
normal=$(tput sgr0)
green=$(tput setaf 2)
blue=$(tput setaf 4)
red=$(tput setaf 1)

function title {
  echo
  echo
  echo "${bold}${blue}$1${normal}
       "
}


function get_major_version {
  full_version=$1
  echo "$full_version" | tr -d 'v' |  awk -F "." '{print $1}'
}


function wait {
  read foo </dev/tty
}


# Installs a whole category like "compiler", "package manager", etc
function install_category {
  name=$1

  # make sure the category is installed
  installed_flag="${name}_installed"
  check_"${name}"_installed
  while [ "${!installed_flag}" != "true" ]; do
    install_"${name}"
    check_"${name}"_installed
  done

  # make sure the category has the right version
  check_"${name}"_version
  version_flag="${name}_version_ok"
  while [ "${!version_flag}" != "true" ]; do
    update_"${name}"
    check_"${name}"_version
  done

  # make sure the category works
  check_"${name}"_works
  works_flag="${name}_works"
  while [ "${!works_flag}" != "true" ]; do
    "${name}"_setup_help
    exit 1
  done
}

echo
title "EXOSPHERE INSTALLER FOR MACOS"
echo "Exosphere is a framework for large-scale software development.
Such an environment requires:
* a ${bold}package management system${normal} for installing/updating additional software as needed
* a ${bold}compiler${normal} to be used by the package manager and applications running inside Exosphere

This script will install all needed components and verifies that they work.
It will confirm with you before making any changes.
You can exit it at any time via ${bold}Ctrl-C${normal} and re-run it at any time.

"


###############################################################################
# MAIN APPLICATION
#

install_category 'compiler'
install_category 'package_manager'
install_category 'pkg_config'
install_category 'node_js'
install_category 'exosphere'

echo
echo
echo "${green}${bold}EXOSPHERE INSTALLED${normal}"
echo
