{"version":3,"sources":["dom/focus.js"],"names":[],"mappings":"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","file":"focus.js","sourcesContent":["// Support for element focus.\n\n\nconst DOM = require('./index');\n\n\nconst FOCUS_ELEMENTS = ['INPUT', 'SELECT', 'TEXTAREA', 'BUTTON', 'ANCHOR'];\n\n\n// The element in focus.\n//\n// If no element has the focus, return the document.body.\nDOM.HTMLDocument.prototype.__defineGetter__('activeElement', function() {\n  return this._inFocus || this.body;\n});\n\n// Change the current element in focus (or null for blur)\nfunction setFocus(document, element) {\n  const inFocus = document._inFocus;\n  if (element !== inFocus) {\n    if (inFocus) {\n      const onblur = document.createEvent('HTMLEvents');\n      onblur.initEvent('blur', false, false);\n      inFocus.dispatchEvent(onblur);\n    }\n    if (element) { // null to blur\n      const onfocus = document.createEvent('HTMLEvents');\n      onfocus.initEvent('focus', false, false);\n      element.dispatchEvent(onfocus);\n      document._inFocus = element;\n      document.defaultView.browser.emit('focus', element);\n    }\n  }\n}\n\n// All HTML elements have a no-op focus/blur methods.\nDOM.HTMLElement.prototype.focus = function() {\n};\nDOM.HTMLElement.prototype.blur = function() {\n};\n\n// Input controls have active focus/blur elements.  JSDOM implements these as\n// no-op, so we have to over-ride each prototype individually.\nconst CONTROLS = [DOM.HTMLInputElement, DOM.HTMLSelectElement, DOM.HTMLTextAreaElement, DOM.HTMLButtonElement, DOM.HTMLAnchorElement];\n\nCONTROLS.forEach(function(elementType) {\n  elementType.prototype.focus = function() {\n    setFocus(this.ownerDocument, this);\n  };\n\n  elementType.prototype.blur = function() {\n    setFocus(this.ownerDocument, null);\n  };\n\n  // Capture the autofocus element and use it to change focus\n  const setAttribute = elementType.prototype.setAttribute;\n  elementType.prototype.setAttribute = function(name, value) {\n    setAttribute.call(this, name, value);\n    if (name === 'autofocus') {\n      const document = this.ownerDocument;\n      if (~FOCUS_ELEMENTS.indexOf(this.tagName) && !document._inFocus)\n        this.focus();\n    }\n  };\n});\n\n\n// When changing focus onto form control, store the current value.  When changing\n// focus to different control, if the value has changed, trigger a change event.\nconst INPUTS = [DOM.HTMLInputElement, DOM.HTMLTextAreaElement, DOM.HTMLSelectElement];\n\nINPUTS.forEach(function(elementType) {\n  elementType.prototype._eventDefaults.focus = function(event) {\n    const element       = event.target;\n    element._focusValue = element.value || '';\n  };\n\n  elementType.prototype._eventDefaults.blur = function(event) {\n    const element     = event.target;\n    const focusValue  = element._focusValue;\n    if (focusValue !== element.value) { // null == undefined\n      const change = element.ownerDocument.createEvent('HTMLEvents');\n      change.initEvent('change', false, false);\n      element.dispatchEvent(change);\n    }\n  };\n});\n\n"]}