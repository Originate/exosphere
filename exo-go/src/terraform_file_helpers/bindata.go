// Code generated by go-bindata.
// sources:
// src/terraform_file_helpers/templates/aws.tf
// src/terraform_file_helpers/templates/exocom.tf
// src/terraform_file_helpers/templates/private_service.tf
// src/terraform_file_helpers/templates/public_service.tf
// DO NOT EDIT!

package terraformFileHelpers

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _srcTerraform_file_helpersTemplatesAwsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcf\x6e\xc3\x20\x0c\xc6\xef\x3c\x85\x85\x76\x5d\x3a\x69\xa7\x1e\xf2\x06\xd3\x4e\xbb\x4d\x53\xe4\x82\x5b\x21\x12\x60\x06\x32\x55\x11\xef\x3e\x39\xe9\x9f\xad\x3e\x01\xdf\xef\xfb\x6c\x53\x88\x19\x8f\x91\x27\x58\x14\x00\xd3\x77\x75\x4c\x76\x98\x89\xb3\x8b\x01\x7a\xd0\x3d\xbc\x74\xfb\x6e\xaf\x95\x02\x38\xa0\xf1\x14\x2c\xe8\xfc\xaa\x57\x03\xc0\xa1\x1a\x4f\x45\x4e\x02\x2f\x0b\xa6\xf4\x8e\x13\xb5\xf6\x7c\x8b\xd6\x2b\xe8\xe9\x0c\x97\xea\x41\x5b\x9a\x77\x37\xa0\x2b\xc7\x5c\xb0\xd0\x06\x32\x9d\xa4\xf5\x2d\x71\xbb\xb7\xb6\xa9\x63\x34\x7e\x28\x78\x18\x49\xd4\x8f\x6b\xc4\x5b\x34\x3e\x0b\xd1\x54\x53\x6a\x8a\xb6\x8e\x04\x1a\x7f\xf2\x36\x67\x8e\x95\xcd\xea\xe8\x76\xf2\x28\xcb\xa0\x31\xb1\x86\x32\x38\x7b\x1f\xeb\x69\x99\x91\xbb\xbb\xb2\x36\xc5\x94\x46\x67\xb0\xb8\x18\x86\x80\x13\x3d\x2c\x2a\x08\x85\x19\xfe\x55\x0f\x3a\x71\xb4\xd5\x88\x4b\x08\x4f\xe7\xcd\x0c\x8f\xdd\xae\xca\x1a\xf4\x67\xf9\x07\xec\xf2\x0d\x02\x65\x32\x95\x5d\x39\x0f\x27\x8e\x35\x65\x81\x3e\xbf\x54\x53\xbf\x01\x00\x00\xff\xff\x64\x90\xdc\x2b\xcd\x01\x00\x00")

func srcTerraform_file_helpersTemplatesAwsTfBytes() ([]byte, error) {
	return bindataRead(
		_srcTerraform_file_helpersTemplatesAwsTf,
		"src/terraform_file_helpers/templates/aws.tf",
	)
}

func srcTerraform_file_helpersTemplatesAwsTf() (*asset, error) {
	bytes, err := srcTerraform_file_helpersTemplatesAwsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/terraform_file_helpers/templates/aws.tf", size: 461, mode: os.FileMode(420), modTime: time.Unix(1500398682, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcTerraform_file_helpersTemplatesExocomTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4f\x6b\xdb\x40\x10\xc5\xef\xfa\x14\x83\xc8\xb1\x95\x93\xf4\x52\x4a\x7c\x6a\x5d\x28\x94\x1a\x9c\xb4\x97\x10\x96\xd1\x6a\x70\x97\x68\x67\xc5\xfe\x51\xe2\x8a\xfd\xee\x65\x57\x56\x6c\xd9\x39\xb4\x10\x5f\x0c\x9a\xdf\xbc\xd9\x7d\x6f\x56\x9b\x26\xb4\x04\x25\x3d\x1b\x69\xb4\x90\x6d\x70\x9e\x6c\x09\x43\x01\xe0\x4c\xb0\x92\x60\x09\x65\xb5\xc0\x27\xb7\x90\xc1\x79\xa3\x17\x23\xba\xff\x7b\x3f\x75\x14\x05\x00\xf6\xa8\x5a\xac\x55\xab\xfc\x4e\xfc\x31\x4c\x2e\x35\x5f\x0c\xe3\x90\x0a\x9f\x5c\x75\x8e\xc4\xb2\x00\x20\xee\xe1\xe4\xb7\x84\xb2\xb3\xa6\x09\xd2\x2b\xc3\x89\x69\x8c\x46\xc5\x82\x51\xd3\x11\x33\x0c\x43\xc3\xee\x07\x6a\x8a\x31\x4b\xfd\x36\xce\x53\x93\xb5\x85\x6a\x26\xec\x62\xe8\xd1\x56\xf3\x5a\xc6\x15\x3b\x8f\x2c\x49\xf8\x5d\x47\x2f\xaa\xfe\xba\xd2\x4a\x5a\x93\x88\x47\xda\xcd\x86\x1e\x0b\x4e\xb5\x2c\x75\x02\xed\xc1\xd1\xa7\x54\xb7\xb4\x55\x86\x4f\xeb\x33\x7b\x46\x24\x66\x37\x1d\xc9\x60\x93\x4d\x5b\x6b\x42\x97\xac\xbc\x9f\xc3\x35\xba\xe4\x8d\x98\x83\xb1\x7c\x57\x24\xe9\x39\x4b\xd2\x4d\xe1\xfe\x1b\xff\xec\xc9\x32\xb6\x02\xdb\xfa\xd5\x86\x87\x7c\xc4\x50\x33\x79\xa1\x9a\xf3\xa0\x3b\xab\x7a\xf4\x24\x0e\x48\xf6\xa8\xef\xe4\x2c\x95\xa3\x8e\xb1\x14\xcb\x22\x16\xc5\xc9\x5a\x3a\xb2\xbd\x92\xf4\x1f\x6b\x39\x75\xa4\x53\x4e\xf7\x7e\x65\xee\x7c\xed\xab\x03\x99\x0f\x2b\x8d\xd6\xc8\xcd\x21\xac\xfb\xb2\x56\xbc\x1f\x51\x3e\x64\x82\x3d\x2a\x26\x2b\x3a\x63\x7d\x92\xfe\x70\x75\x79\x99\x7b\xbb\x20\x02\x2b\xef\x5e\x82\xbe\xba\xfe\x38\xae\xb1\x7c\x4c\x23\x34\x6e\x69\x5a\xe1\x9e\xac\x4b\xb9\xc7\x12\x16\x8b\xbb\xf5\x97\xf5\x27\x50\xba\x6b\x49\x13\x7b\x30\x2c\x09\x48\x5a\x70\xa1\xcb\x53\x94\x03\xc5\xd0\xb5\x28\xe9\xfc\xe9\x9c\x3d\x1b\xe2\x5e\x59\xc3\x49\x4a\xf4\x68\x15\xd6\x6d\x7e\x97\x43\x4e\x7d\xb3\xfe\xbe\x3a\x59\x53\x80\xdb\xd5\xe6\xd7\xb7\xcf\x2b\xb1\x59\xff\xbc\x5b\xdd\xc2\x12\x6e\x6e\x56\xeb\xaf\xc5\x30\x0c\x7b\x5b\x37\x26\x78\x72\x31\xc6\x22\x7d\x07\x88\xc9\x66\x4d\xda\xd8\x9d\xb0\x94\x20\x4c\xe3\x8f\x6e\xfd\x96\x6f\x23\x16\x7f\x03\x00\x00\xff\xff\x7c\x42\x21\xba\xb6\x04\x00\x00")

func srcTerraform_file_helpersTemplatesExocomTfBytes() ([]byte, error) {
	return bindataRead(
		_srcTerraform_file_helpersTemplatesExocomTf,
		"src/terraform_file_helpers/templates/exocom.tf",
	)
}

func srcTerraform_file_helpersTemplatesExocomTf() (*asset, error) {
	bytes, err := srcTerraform_file_helpersTemplatesExocomTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/terraform_file_helpers/templates/exocom.tf", size: 1206, mode: os.FileMode(420), modTime: time.Unix(1500405119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcTerraform_file_helpersTemplatesPrivate_serviceTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcf\x6a\x33\x31\x0c\xc4\xef\x7e\x0a\x61\xbe\xeb\xb7\x7b\x2f\xe4\xd4\xde\x03\xa5\xf4\xba\xa8\x5e\x25\x98\xf8\xcf\x22\xdb\xbb\x04\xe1\x77\x2f\x5e\x87\xb6\x49\x04\x3a\xcd\x6f\x46\x8c\x7c\x9c\x8b\x23\xd0\x22\x89\x78\xb5\x86\xde\xa3\xa3\x5a\x35\x88\x02\x48\xb1\xb0\x21\x38\x80\x1e\x46\xdc\xd2\xb8\x45\xbe\x10\xff\xbf\x91\x5a\x29\x80\x80\x7e\x07\x1e\xfd\x4d\x33\xae\xa4\x4c\x3c\xd9\x19\xfe\xcc\x01\xf4\x3f\xe9\x67\x07\xdc\xd2\xf0\x4b\x55\xdd\x4c\xd1\x7b\x0c\x77\x8e\xdd\x24\x22\x29\x23\xe7\xb2\xbc\x76\xa2\xd6\xda\xf0\xa5\x4c\x25\xd8\x9c\x1e\x70\x2d\x62\x96\x52\xf7\xc8\x39\x9a\x4b\x3b\xe0\xf1\x4c\x77\x8c\x86\x71\xfc\x38\xbe\x1d\x5f\xc0\xfa\xc5\x91\xa7\x90\x01\x4f\x99\x18\xc8\x30\x9c\x4a\x30\xd9\xc6\x80\xce\xe6\x2b\xd8\x04\x36\xc0\xe2\xd0\x90\x02\xa0\xb0\xc2\xf3\x1c\x40\x2f\x1c\xe7\xb2\xdb\x74\xc7\x2c\xc7\xd0\x82\xa7\x15\xd9\xe2\x97\xa3\xd4\xca\xa8\x86\x8b\x08\x85\xf5\x13\x39\xf5\x2e\x6d\x3d\xf9\xc8\xd7\x89\xa9\xbd\x13\x5b\xce\x4f\x9f\x2e\xf5\x4a\x4c\xe7\x9b\xf4\xf4\xda\x15\x79\xe8\x72\xd5\xaa\xaa\xef\x00\x00\x00\xff\xff\xe3\x97\x80\x2e\xe1\x01\x00\x00")

func srcTerraform_file_helpersTemplatesPrivate_serviceTfBytes() ([]byte, error) {
	return bindataRead(
		_srcTerraform_file_helpersTemplatesPrivate_serviceTf,
		"src/terraform_file_helpers/templates/private_service.tf",
	)
}

func srcTerraform_file_helpersTemplatesPrivate_serviceTf() (*asset, error) {
	bytes, err := srcTerraform_file_helpersTemplatesPrivate_serviceTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/terraform_file_helpers/templates/private_service.tf", size: 481, mode: os.FileMode(420), modTime: time.Unix(1500405119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcTerraform_file_helpersTemplatesPublic_serviceTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x41\x8f\xdb\x20\x10\x85\xef\xfe\x15\x23\xab\xd7\x26\xf7\x4a\x39\x6d\xef\x5b\x55\x55\x2f\x55\x85\x08\x9e\x4d\x50\xf0\x80\x06\xf0\x36\x45\xfc\xf7\x0a\xf0\x7a\xe3\x38\x5d\xa4\x5c\x32\xdf\x9b\x79\xbc\xc1\xa3\x1d\xa2\x41\xe8\x53\xf2\xc8\x93\x56\xf8\xdd\x1a\xcc\xb9\x87\xd4\x01\x78\x1b\x59\x21\x1c\xa0\xdf\xed\xe5\xab\xdf\xbb\x78\x34\x5a\x7d\x9e\xc9\xbe\xeb\x00\x48\x8e\x15\xb8\xd7\x97\x9a\x34\x47\xe1\x51\x45\xd6\xe1\x2a\x4e\x6c\xa3\x83\x7a\x0e\xf0\xab\xff\x94\xda\xe4\x9d\x7c\xf5\x3b\xfc\x13\x90\x49\x1a\xb1\x55\xe4\xfe\xf7\x5b\xa7\x78\x24\x0c\x42\x0f\x1e\x96\xb3\xe9\xd4\x1c\xde\xb0\x4d\xaf\x4c\xf4\x01\x59\xe8\x01\x56\xe7\x00\x6b\xf9\x3b\x97\xfb\x22\xb3\xe3\x28\xe9\x4e\x53\x65\x29\x25\x1f\x24\x87\xe8\x9e\x1a\x93\x73\xae\x02\x0a\x52\x13\xb2\x70\x96\xc3\x6a\x4e\x4a\xcd\xdb\x37\xcb\x21\xb7\xee\x2e\x8a\x48\x3a\xf8\x4d\xf7\x3e\x25\xe5\x62\xa3\x06\xab\x2e\xc5\xd1\x28\x4f\x78\x47\xf5\xb0\xdf\xff\x78\xfe\xfa\xfc\x05\xf4\xe8\x0c\x8e\x48\x01\xe4\x4b\x40\x06\x54\x0c\x2f\x91\x54\xd0\x96\xa4\xd1\xe1\x0a\xda\x83\x26\x70\x46\x2a\xec\x00\x50\x79\xc1\xd6\xa0\x90\x4c\x1f\xe5\x51\xb8\x79\xaf\x42\xcb\x71\xd1\x54\x67\x48\xd3\x26\x99\xb9\x89\x63\x3b\xc4\x3a\x7d\x06\x35\x5b\x2a\xfe\xc4\x24\x59\xcb\xa3\x41\xdf\x62\xec\x8a\x20\xa5\x84\x34\xfd\x94\xec\x5b\x8a\xe5\xb7\x3c\x89\x81\xbc\xa8\x8f\xec\x26\x9c\x14\xd9\xe4\x16\xcf\xc2\x9d\xad\x0f\x38\x88\xbf\x96\xb0\xac\xb9\xde\x64\x92\xbc\x5b\xff\x5f\x35\x67\x94\x26\x9c\x85\x3a\xa3\xba\x08\xa4\xc1\x59\x4d\x61\xe9\xdd\xaa\x4f\xa5\x38\xcf\xd0\xf4\x5f\x2f\xab\xb4\x36\xdc\x5a\xfd\xc8\xe1\x23\xf5\x03\xc7\xc6\x9e\xc4\x31\xaa\x0b\x86\x8f\xdf\xef\x3b\xf7\xa6\x1c\x71\xb4\x7c\x15\x8c\x65\x8d\xb2\x6c\xe4\x26\xc7\x56\x6c\x97\x64\x3c\x2d\xc5\xcd\x88\x12\x64\x03\x2a\x3b\x39\xb5\xf9\x94\x1e\xd9\x69\x5c\xee\xbb\xdc\xfd\x0b\x00\x00\xff\xff\x96\x05\x4f\x5d\x68\x04\x00\x00")

func srcTerraform_file_helpersTemplatesPublic_serviceTfBytes() ([]byte, error) {
	return bindataRead(
		_srcTerraform_file_helpersTemplatesPublic_serviceTf,
		"src/terraform_file_helpers/templates/public_service.tf",
	)
}

func srcTerraform_file_helpersTemplatesPublic_serviceTf() (*asset, error) {
	bytes, err := srcTerraform_file_helpersTemplatesPublic_serviceTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/terraform_file_helpers/templates/public_service.tf", size: 1128, mode: os.FileMode(420), modTime: time.Unix(1500405119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"src/terraform_file_helpers/templates/aws.tf": srcTerraform_file_helpersTemplatesAwsTf,
	"src/terraform_file_helpers/templates/exocom.tf": srcTerraform_file_helpersTemplatesExocomTf,
	"src/terraform_file_helpers/templates/private_service.tf": srcTerraform_file_helpersTemplatesPrivate_serviceTf,
	"src/terraform_file_helpers/templates/public_service.tf": srcTerraform_file_helpersTemplatesPublic_serviceTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"src": &bintree{nil, map[string]*bintree{
		"terraform_file_helpers": &bintree{nil, map[string]*bintree{
			"templates": &bintree{nil, map[string]*bintree{
				"aws.tf": &bintree{srcTerraform_file_helpersTemplatesAwsTf, map[string]*bintree{}},
				"exocom.tf": &bintree{srcTerraform_file_helpersTemplatesExocomTf, map[string]*bintree{}},
				"private_service.tf": &bintree{srcTerraform_file_helpersTemplatesPrivate_serviceTf, map[string]*bintree{}},
				"public_service.tf": &bintree{srcTerraform_file_helpersTemplatesPublic_serviceTf, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

