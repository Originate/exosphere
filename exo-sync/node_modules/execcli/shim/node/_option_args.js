/**
 * @function _optionArgs
 * @private
 */

'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var stringcase = require('stringcase');
var arrayreduce = require('arrayreduce');

/** @lends _optionArgs */
function _optionArgs(options) {
  return (0, _keys2.default)(options).filter(function (key) {
    var value = options[key];
    var empty = value === undefined || value === null || value === '' || value === false;
    return !empty;
  }).map(function (key) {
    var prefix = key.length === 1 ? '-' : '--';
    var prefixedKey = prefix + stringcase.spinalcase(key).replace(/^\-+/, '');
    var value = options[key];
    if (value === true) {
      return [prefixedKey];
    } else {
      return [].concat(value || []).map(function (value) {
        return [prefixedKey, value];
      }).reduce(arrayreduce.arrayConcat(), []);
    }
  }).reduce(arrayreduce.arrayConcat(), []);
}

module.exports = _optionArgs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9vcHRpb25fYXJncy5qcyJdLCJuYW1lcyI6WyJzdHJpbmdjYXNlIiwicmVxdWlyZSIsImFycmF5cmVkdWNlIiwiX29wdGlvbkFyZ3MiLCJvcHRpb25zIiwiZmlsdGVyIiwia2V5IiwidmFsdWUiLCJlbXB0eSIsInVuZGVmaW5lZCIsIm1hcCIsInByZWZpeCIsImxlbmd0aCIsInByZWZpeGVkS2V5Iiwic3BpbmFsY2FzZSIsInJlcGxhY2UiLCJjb25jYXQiLCJyZWR1Y2UiLCJhcnJheUNvbmNhdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUtBOzs7Ozs7OztBQUVBLElBQU1BLGFBQWFDLFFBQVEsWUFBUixDQUFuQjtBQUNBLElBQU1DLGNBQWNELFFBQVEsYUFBUixDQUFwQjs7QUFFQTtBQUNBLFNBQVNFLFdBQVQsQ0FBc0JDLE9BQXRCLEVBQStCO0FBQzdCLFNBQU8sb0JBQVlBLE9BQVosRUFDSkMsTUFESSxDQUNHLFVBQUNDLEdBQUQsRUFBUztBQUNmLFFBQUlDLFFBQVFILFFBQVNFLEdBQVQsQ0FBWjtBQUNBLFFBQUlFLFFBQVNELFVBQVVFLFNBQVgsSUFBMEJGLFVBQVUsSUFBcEMsSUFBOENBLFVBQVUsRUFBeEQsSUFBZ0VBLFVBQVUsS0FBdEY7QUFDQSxXQUFPLENBQUNDLEtBQVI7QUFDRCxHQUxJLEVBTUpFLEdBTkksQ0FNQSxVQUFDSixHQUFELEVBQVM7QUFDWixRQUFJSyxTQUFTTCxJQUFJTSxNQUFKLEtBQWUsQ0FBZixHQUFtQixHQUFuQixHQUF5QixJQUF0QztBQUNBLFFBQUlDLGNBQWNGLFNBQVNYLFdBQVdjLFVBQVgsQ0FBc0JSLEdBQXRCLEVBQTJCUyxPQUEzQixDQUFtQyxNQUFuQyxFQUEyQyxFQUEzQyxDQUEzQjtBQUNBLFFBQUlSLFFBQVFILFFBQVNFLEdBQVQsQ0FBWjtBQUNBLFFBQUlDLFVBQVUsSUFBZCxFQUFvQjtBQUNsQixhQUFPLENBQUVNLFdBQUYsQ0FBUDtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU8sR0FBR0csTUFBSCxDQUFVVCxTQUFTLEVBQW5CLEVBQXVCRyxHQUF2QixDQUEyQixVQUFDSCxLQUFELEVBQVc7QUFDM0MsZUFBTyxDQUFFTSxXQUFGLEVBQWVOLEtBQWYsQ0FBUDtBQUNELE9BRk0sRUFFSlUsTUFGSSxDQUVHZixZQUFZZ0IsV0FBWixFQUZILEVBRThCLEVBRjlCLENBQVA7QUFHRDtBQUNGLEdBakJJLEVBaUJGRCxNQWpCRSxDQWlCS2YsWUFBWWdCLFdBQVosRUFqQkwsRUFpQmdDLEVBakJoQyxDQUFQO0FBa0JEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCakIsV0FBakIiLCJmaWxlIjoiX29wdGlvbl9hcmdzLmpzIiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZ1bmN0aW9uIF9vcHRpb25BcmdzXG4gKiBAcHJpdmF0ZVxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBzdHJpbmdjYXNlID0gcmVxdWlyZSgnc3RyaW5nY2FzZScpXG5jb25zdCBhcnJheXJlZHVjZSA9IHJlcXVpcmUoJ2FycmF5cmVkdWNlJylcblxuLyoqIEBsZW5kcyBfb3B0aW9uQXJncyAqL1xuZnVuY3Rpb24gX29wdGlvbkFyZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9wdGlvbnMpXG4gICAgLmZpbHRlcigoa2V5KSA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBvcHRpb25zWyBrZXkgXVxuICAgICAgbGV0IGVtcHR5ID0gKHZhbHVlID09PSB1bmRlZmluZWQpIHx8ICh2YWx1ZSA9PT0gbnVsbCkgfHwgKHZhbHVlID09PSAnJykgfHwgKHZhbHVlID09PSBmYWxzZSlcbiAgICAgIHJldHVybiAhZW1wdHlcbiAgICB9KVxuICAgIC5tYXAoKGtleSkgPT4ge1xuICAgICAgbGV0IHByZWZpeCA9IGtleS5sZW5ndGggPT09IDEgPyAnLScgOiAnLS0nXG4gICAgICBsZXQgcHJlZml4ZWRLZXkgPSBwcmVmaXggKyBzdHJpbmdjYXNlLnNwaW5hbGNhc2Uoa2V5KS5yZXBsYWNlKC9eXFwtKy8sICcnKVxuICAgICAgbGV0IHZhbHVlID0gb3B0aW9uc1sga2V5IF1cbiAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gWyBwcmVmaXhlZEtleSBdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW10uY29uY2F0KHZhbHVlIHx8IFtdKS5tYXAoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIFsgcHJlZml4ZWRLZXksIHZhbHVlIF1cbiAgICAgICAgfSkucmVkdWNlKGFycmF5cmVkdWNlLmFycmF5Q29uY2F0KCksIFtdKVxuICAgICAgfVxuICAgIH0pLnJlZHVjZShhcnJheXJlZHVjZS5hcnJheUNvbmNhdCgpLCBbXSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb3B0aW9uQXJnc1xuIl19