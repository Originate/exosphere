/**
 * Delete file.
 * @function filedel
 * @param {string} filename - Filename to delete.
 * @param {object} [options] - Optional settings.
 * @param {boolean} [options.force=false] - Unlink even if readonly.
 * @returns {Promise}
 */

'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var co = require('co');
var rimraf = require('rimraf');

var _require = require('asfs');

var existsAsync = _require.existsAsync;

var argx = require('argx');
var aglob = require('aglob');
var doUnlink = require('./filing/do_unlink');
var isDir = require('./filing/is_dir');

/** @lends filedel */
function filedel(target) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var args = argx(arguments);
  if (args.pop('function')) {
    throw new Error('[filedel] Callback is no more supported. Use promise interface instead.');
  }
  options = args.pop('object') || {};

  return co(_regenerator2.default.mark(function _callee() {
    var filenames, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, filename, exists, isDir_;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return aglob(target, {});

          case 2:
            filenames = _context.sent;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 6;
            _iterator = (0, _getIterator3.default)(filenames);

          case 8:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 25;
              break;
            }

            filename = _step.value;
            _context.next = 12;
            return existsAsync(filename);

          case 12:
            exists = _context.sent;

            if (exists) {
              _context.next = 15;
              break;
            }

            return _context.abrupt('return');

          case 15:
            _context.next = 17;
            return isDir(filename);

          case 17:
            isDir_ = _context.sent;

            if (!isDir_) {
              _context.next = 20;
              break;
            }

            throw new Error('[filedel] Can not unlink directory: ' + filename);

          case 20:
            _context.next = 22;
            return doUnlink(filename, !!options.force);

          case 22:
            _iteratorNormalCompletion = true;
            _context.next = 8;
            break;

          case 25:
            _context.next = 31;
            break;

          case 27:
            _context.prev = 27;
            _context.t0 = _context['catch'](6);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 31:
            _context.prev = 31;
            _context.prev = 32;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 34:
            _context.prev = 34;

            if (!_didIteratorError) {
              _context.next = 37;
              break;
            }

            throw _iteratorError;

          case 37:
            return _context.finish(34);

          case 38:
            return _context.finish(31);

          case 39:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[6, 27, 31, 39], [32,, 34, 38]]);
  }));
}

(0, _assign2.default)(filedel, {
  recursive: function recursive(dirname) {
    return co(_regenerator2.default.mark(function _callee2() {
      var exists, isDir_;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return existsAsync(dirname);

            case 2:
              exists = _context2.sent;

              if (exists) {
                _context2.next = 5;
                break;
              }

              return _context2.abrupt('return');

            case 5:
              _context2.next = 7;
              return isDir(dirname);

            case 7:
              isDir_ = _context2.sent;

              if (isDir_) {
                _context2.next = 10;
                break;
              }

              throw new Error('[filedel] Not a directory: ' + dirname);

            case 10:
              _context2.next = 12;
              return new _promise2.default(function (resolve, reject) {
                return rimraf(dirname, function (err) {
                  return err ? reject(err) : resolve();
                });
              });

            case 12:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));
  }
});

module.exports = filedel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGVkZWwuanMiXSwibmFtZXMiOlsiY28iLCJyZXF1aXJlIiwicmltcmFmIiwiZXhpc3RzQXN5bmMiLCJhcmd4IiwiYWdsb2IiLCJkb1VubGluayIsImlzRGlyIiwiZmlsZWRlbCIsInRhcmdldCIsIm9wdGlvbnMiLCJhcmdzIiwiYXJndW1lbnRzIiwicG9wIiwiRXJyb3IiLCJmaWxlbmFtZXMiLCJmaWxlbmFtZSIsImV4aXN0cyIsImlzRGlyXyIsImZvcmNlIiwicmVjdXJzaXZlIiwiZGlybmFtZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsS0FBS0MsUUFBUSxJQUFSLENBQVg7QUFDQSxJQUFNQyxTQUFTRCxRQUFRLFFBQVIsQ0FBZjs7ZUFDd0JBLFFBQVEsTUFBUixDOztJQUFoQkUsVyxZQUFBQSxXOztBQUNSLElBQU1DLE9BQU9ILFFBQVEsTUFBUixDQUFiO0FBQ0EsSUFBTUksUUFBUUosUUFBUSxPQUFSLENBQWQ7QUFDQSxJQUFNSyxXQUFXTCxRQUFRLG9CQUFSLENBQWpCO0FBQ0EsSUFBTU0sUUFBUU4sUUFBUSxpQkFBUixDQUFkOztBQUVBO0FBQ0EsU0FBU08sT0FBVCxDQUFrQkMsTUFBbEIsRUFBd0M7QUFBQSxNQUFkQyxPQUFjLHlEQUFKLEVBQUk7O0FBQ3RDLE1BQUlDLE9BQU9QLEtBQUtRLFNBQUwsQ0FBWDtBQUNBLE1BQUlELEtBQUtFLEdBQUwsQ0FBUyxVQUFULENBQUosRUFBMEI7QUFDeEIsVUFBTSxJQUFJQyxLQUFKLENBQVUseUVBQVYsQ0FBTjtBQUNEO0FBQ0RKLFlBQVVDLEtBQUtFLEdBQUwsQ0FBUyxRQUFULEtBQXNCLEVBQWhDOztBQUVBLFNBQU9iLDhCQUFHO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQUNjSyxNQUFNSSxNQUFOLEVBQWMsRUFBZCxDQURkOztBQUFBO0FBQ0pNLHFCQURJO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxtREFFYUEsU0FGYjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUVDQyxvQkFGRDtBQUFBO0FBQUEsbUJBR2FiLFlBQVlhLFFBQVosQ0FIYjs7QUFBQTtBQUdGQyxrQkFIRTs7QUFBQSxnQkFJREEsTUFKQztBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUEsbUJBT2FWLE1BQU1TLFFBQU4sQ0FQYjs7QUFBQTtBQU9GRSxrQkFQRTs7QUFBQSxpQkFRRkEsTUFSRTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxrQkFTRSxJQUFJSixLQUFKLDBDQUFpREUsUUFBakQsQ0FURjs7QUFBQTtBQUFBO0FBQUEsbUJBV0FWLFNBQVNVLFFBQVQsRUFBbUIsQ0FBQyxDQUFDTixRQUFRUyxLQUE3QixDQVhBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBSCxFQUFQO0FBY0Q7O0FBRUQsc0JBQWNYLE9BQWQsRUFBdUI7QUFDckJZLFdBRHFCLHFCQUNWQyxPQURVLEVBQ0Q7QUFDbEIsV0FBT3JCLDhCQUFHO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEscUJBQ1dHLFlBQVlrQixPQUFaLENBRFg7O0FBQUE7QUFDSkosb0JBREk7O0FBQUEsa0JBRUhBLE1BRkc7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBQUE7QUFBQTtBQUFBLHFCQUtXVixNQUFNYyxPQUFOLENBTFg7O0FBQUE7QUFLSkgsb0JBTEk7O0FBQUEsa0JBTUhBLE1BTkc7QUFBQTtBQUFBO0FBQUE7O0FBQUEsb0JBT0EsSUFBSUosS0FBSixpQ0FBd0NPLE9BQXhDLENBUEE7O0FBQUE7QUFBQTtBQUFBLHFCQVNGLHNCQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVjtBQUFBLHVCQUNoQnJCLE9BQU9tQixPQUFQLEVBQWdCLFVBQUNHLEdBQUQ7QUFBQSx5QkFBU0EsTUFBTUQsT0FBT0MsR0FBUCxDQUFOLEdBQW9CRixTQUE3QjtBQUFBLGlCQUFoQixDQURnQjtBQUFBLGVBQVosQ0FURTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUFILEVBQVA7QUFhRDtBQWZvQixDQUF2Qjs7QUFrQkFHLE9BQU9DLE9BQVAsR0FBaUJsQixPQUFqQiIsImZpbGUiOiJmaWxlZGVsLmpzIiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGVsZXRlIGZpbGUuXG4gKiBAZnVuY3Rpb24gZmlsZWRlbFxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lIC0gRmlsZW5hbWUgdG8gZGVsZXRlLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5mb3JjZT1mYWxzZV0gLSBVbmxpbmsgZXZlbiBpZiByZWFkb25seS5cbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBjbyA9IHJlcXVpcmUoJ2NvJylcbmNvbnN0IHJpbXJhZiA9IHJlcXVpcmUoJ3JpbXJhZicpXG5jb25zdCB7IGV4aXN0c0FzeW5jIH0gPSByZXF1aXJlKCdhc2ZzJylcbmNvbnN0IGFyZ3ggPSByZXF1aXJlKCdhcmd4JylcbmNvbnN0IGFnbG9iID0gcmVxdWlyZSgnYWdsb2InKVxuY29uc3QgZG9VbmxpbmsgPSByZXF1aXJlKCcuL2ZpbGluZy9kb191bmxpbmsnKVxuY29uc3QgaXNEaXIgPSByZXF1aXJlKCcuL2ZpbGluZy9pc19kaXInKVxuXG4vKiogQGxlbmRzIGZpbGVkZWwgKi9cbmZ1bmN0aW9uIGZpbGVkZWwgKHRhcmdldCwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCBhcmdzID0gYXJneChhcmd1bWVudHMpXG4gIGlmIChhcmdzLnBvcCgnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignW2ZpbGVkZWxdIENhbGxiYWNrIGlzIG5vIG1vcmUgc3VwcG9ydGVkLiBVc2UgcHJvbWlzZSBpbnRlcmZhY2UgaW5zdGVhZC4nKVxuICB9XG4gIG9wdGlvbnMgPSBhcmdzLnBvcCgnb2JqZWN0JykgfHwge31cblxuICByZXR1cm4gY28oZnVuY3Rpb24gKiAoKSB7XG4gICAgbGV0IGZpbGVuYW1lcyA9IHlpZWxkIGFnbG9iKHRhcmdldCwge30pXG4gICAgZm9yIChsZXQgZmlsZW5hbWUgb2YgZmlsZW5hbWVzKSB7XG4gICAgICBsZXQgZXhpc3RzID0geWllbGQgZXhpc3RzQXN5bmMoZmlsZW5hbWUpXG4gICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGxldCBpc0Rpcl8gPSB5aWVsZCBpc0RpcihmaWxlbmFtZSlcbiAgICAgIGlmIChpc0Rpcl8pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbZmlsZWRlbF0gQ2FuIG5vdCB1bmxpbmsgZGlyZWN0b3J5OiAke2ZpbGVuYW1lfWApXG4gICAgICB9XG4gICAgICB5aWVsZCBkb1VubGluayhmaWxlbmFtZSwgISFvcHRpb25zLmZvcmNlKVxuICAgIH1cbiAgfSlcbn1cblxuT2JqZWN0LmFzc2lnbihmaWxlZGVsLCB7XG4gIHJlY3Vyc2l2ZSAoZGlybmFtZSkge1xuICAgIHJldHVybiBjbyhmdW5jdGlvbiAqICgpIHtcbiAgICAgIGxldCBleGlzdHMgPSB5aWVsZCBleGlzdHNBc3luYyhkaXJuYW1lKVxuICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBsZXQgaXNEaXJfID0geWllbGQgaXNEaXIoZGlybmFtZSlcbiAgICAgIGlmICghaXNEaXJfKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgW2ZpbGVkZWxdIE5vdCBhIGRpcmVjdG9yeTogJHtkaXJuYW1lfWApXG4gICAgICB9XG4gICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgICByaW1yYWYoZGlybmFtZSwgKGVycikgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCkpXG4gICAgICApXG4gICAgfSlcbiAgfVxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBmaWxlZGVsXG4iXX0=