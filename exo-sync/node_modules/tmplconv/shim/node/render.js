/**
 * Render template.
 * @memberof module:tmplconv/lib
 * @function render
 * @param {string} srcDir - Name of source directory, which contains template files.
 * @param {string} destDir - Name of destination directory.
 * @param {object} options - Optional settings.
 * @param {string|object} options.data - Data for tmpls.
 * @param {string|string[]} options.pattern - Source patterns.
 * @param {string|string[]} [options.ignore] - Filename pattern.
 * @param {string} [options.prefix='_____'] - Embed prefix.
 * @param {string} [options.suffix='_____'] - Embed suffix.
 * @param {string} [options.extname='.tmpl'] - Template extension name.
 * @param {boolean} [options.silent=false] - Silent or not.
 * @param {string} [options.mode='644'] - File permission to generate.
 * @param {boolean} [options.clean=false] - Cleanup destination directory before convert.
 * @param {boolean} [options.once=false] - Write only first time. Skip if already exists.
 * @returns {Promise}
 */

'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argx = require('argx');
var co = require('co');
var path = require('path');
var convert = require('./converting/convert');
var _rule = require('./_rule');
var removeExtname = require('./naming/remove_extname');
var _logResults = require('./_log_results');

/** @lends render */
function render(srcDir, destDir, options) {
  var args = argx(arguments);
  if (args.pop('function')) {
    throw new Error('Callback is no longer supported. Use promise interface instead.');
  }
  options = args.pop('object') || {};

  return co(_regenerator2.default.mark(function _callee() {
    var results, shouldLog;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return convert(srcDir, destDir, {
              pattern: options.pattern || '**/*.*',
              rule: _rule(options.data, options.prefix, options.suffix),
              ignore: options.ignore,
              mode: options.mode,
              clean: options.clean,
              once: options.once,
              out: function out(src) {
                return removeExtname(src, options.extname || '.tmpl');
              }
            });

          case 2:
            results = _context.sent;
            shouldLog = !options.silent;

            if (shouldLog) {
              _logResults(results);
            }

            // Wait for flush
            _context.next = 7;
            return new _promise2.default(function (resolve) {
              return process.nextTick(function () {
                return resolve();
              });
            });

          case 7:
            return _context.abrupt('return', results);

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
}

module.exports = render;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbmRlci5qcyJdLCJuYW1lcyI6WyJhcmd4IiwicmVxdWlyZSIsImNvIiwicGF0aCIsImNvbnZlcnQiLCJfcnVsZSIsInJlbW92ZUV4dG5hbWUiLCJfbG9nUmVzdWx0cyIsInJlbmRlciIsInNyY0RpciIsImRlc3REaXIiLCJvcHRpb25zIiwiYXJncyIsImFyZ3VtZW50cyIsInBvcCIsIkVycm9yIiwicGF0dGVybiIsInJ1bGUiLCJkYXRhIiwicHJlZml4Iiwic3VmZml4IiwiaWdub3JlIiwibW9kZSIsImNsZWFuIiwib25jZSIsIm91dCIsInNyYyIsImV4dG5hbWUiLCJyZXN1bHRzIiwic2hvdWxkTG9nIiwic2lsZW50IiwicmVzb2x2ZSIsInByb2Nlc3MiLCJuZXh0VGljayIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNQyxLQUFLRCxRQUFRLElBQVIsQ0FBWDtBQUNBLElBQU1FLE9BQU9GLFFBQVEsTUFBUixDQUFiO0FBQ0EsSUFBTUcsVUFBVUgsUUFBUSxzQkFBUixDQUFoQjtBQUNBLElBQU1JLFFBQVFKLFFBQVEsU0FBUixDQUFkO0FBQ0EsSUFBTUssZ0JBQWdCTCxRQUFRLHlCQUFSLENBQXRCO0FBQ0EsSUFBTU0sY0FBY04sUUFBUSxnQkFBUixDQUFwQjs7QUFFQTtBQUNBLFNBQVNPLE1BQVQsQ0FBaUJDLE1BQWpCLEVBQXlCQyxPQUF6QixFQUFrQ0MsT0FBbEMsRUFBMkM7QUFDekMsTUFBSUMsT0FBT1osS0FBS2EsU0FBTCxDQUFYO0FBQ0EsTUFBSUQsS0FBS0UsR0FBTCxDQUFTLFVBQVQsQ0FBSixFQUEwQjtBQUN4QixVQUFNLElBQUlDLEtBQUosQ0FBVSxpRUFBVixDQUFOO0FBQ0Q7QUFDREosWUFBVUMsS0FBS0UsR0FBTCxDQUFTLFFBQVQsS0FBc0IsRUFBaEM7O0FBRUEsU0FBT1osOEJBQUc7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFDWUUsUUFBUUssTUFBUixFQUFnQkMsT0FBaEIsRUFBeUI7QUFDM0NNLHVCQUFTTCxRQUFRSyxPQUFSLElBQW1CLFFBRGU7QUFFM0NDLG9CQUFNWixNQUFNTSxRQUFRTyxJQUFkLEVBQW9CUCxRQUFRUSxNQUE1QixFQUFvQ1IsUUFBUVMsTUFBNUMsQ0FGcUM7QUFHM0NDLHNCQUFRVixRQUFRVSxNQUgyQjtBQUkzQ0Msb0JBQU1YLFFBQVFXLElBSjZCO0FBSzNDQyxxQkFBT1osUUFBUVksS0FMNEI7QUFNM0NDLG9CQUFNYixRQUFRYSxJQU42QjtBQU8zQ0MsbUJBQUssYUFBVUMsR0FBVixFQUFlO0FBQ2xCLHVCQUFPcEIsY0FBY29CLEdBQWQsRUFBbUJmLFFBQVFnQixPQUFSLElBQW1CLE9BQXRDLENBQVA7QUFDRDtBQVQwQyxhQUF6QixDQURaOztBQUFBO0FBQ0pDLG1CQURJO0FBWUpDLHFCQVpJLEdBWVEsQ0FBQ2xCLFFBQVFtQixNQVpqQjs7QUFhUixnQkFBSUQsU0FBSixFQUFlO0FBQ2J0QiwwQkFBWXFCLE9BQVo7QUFDRDs7QUFFRDtBQWpCUTtBQUFBLG1CQWtCRixzQkFBWSxVQUFDRyxPQUFEO0FBQUEscUJBQ2hCQyxRQUFRQyxRQUFSLENBQWlCO0FBQUEsdUJBQU1GLFNBQU47QUFBQSxlQUFqQixDQURnQjtBQUFBLGFBQVosQ0FsQkU7O0FBQUE7QUFBQSw2Q0FzQkRILE9BdEJDOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQUgsRUFBUDtBQXdCRDs7QUFFRE0sT0FBT0MsT0FBUCxHQUFpQjNCLE1BQWpCIiwiZmlsZSI6InJlbmRlci5qcyIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlbmRlciB0ZW1wbGF0ZS5cbiAqIEBtZW1iZXJvZiBtb2R1bGU6dG1wbGNvbnYvbGliXG4gKiBAZnVuY3Rpb24gcmVuZGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3JjRGlyIC0gTmFtZSBvZiBzb3VyY2UgZGlyZWN0b3J5LCB3aGljaCBjb250YWlucyB0ZW1wbGF0ZSBmaWxlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkZXN0RGlyIC0gTmFtZSBvZiBkZXN0aW5hdGlvbiBkaXJlY3RvcnkuXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBvcHRpb25zLmRhdGEgLSBEYXRhIGZvciB0bXBscy5cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBvcHRpb25zLnBhdHRlcm4gLSBTb3VyY2UgcGF0dGVybnMuXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gW29wdGlvbnMuaWdub3JlXSAtIEZpbGVuYW1lIHBhdHRlcm4uXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucHJlZml4PSdfX19fXyddIC0gRW1iZWQgcHJlZml4LlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnN1ZmZpeD0nX19fX18nXSAtIEVtYmVkIHN1ZmZpeC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5leHRuYW1lPScudG1wbCddIC0gVGVtcGxhdGUgZXh0ZW5zaW9uIG5hbWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnNpbGVudD1mYWxzZV0gLSBTaWxlbnQgb3Igbm90LlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm1vZGU9JzY0NCddIC0gRmlsZSBwZXJtaXNzaW9uIHRvIGdlbmVyYXRlLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jbGVhbj1mYWxzZV0gLSBDbGVhbnVwIGRlc3RpbmF0aW9uIGRpcmVjdG9yeSBiZWZvcmUgY29udmVydC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMub25jZT1mYWxzZV0gLSBXcml0ZSBvbmx5IGZpcnN0IHRpbWUuIFNraXAgaWYgYWxyZWFkeSBleGlzdHMuXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgYXJneCA9IHJlcXVpcmUoJ2FyZ3gnKVxuY29uc3QgY28gPSByZXF1aXJlKCdjbycpXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgY29udmVydCA9IHJlcXVpcmUoJy4vY29udmVydGluZy9jb252ZXJ0Jyk7XG5jb25zdCBfcnVsZSA9IHJlcXVpcmUoJy4vX3J1bGUnKTtcbmNvbnN0IHJlbW92ZUV4dG5hbWUgPSByZXF1aXJlKCcuL25hbWluZy9yZW1vdmVfZXh0bmFtZScpO1xuY29uc3QgX2xvZ1Jlc3VsdHMgPSByZXF1aXJlKCcuL19sb2dfcmVzdWx0cycpO1xuXG4vKiogQGxlbmRzIHJlbmRlciAqL1xuZnVuY3Rpb24gcmVuZGVyIChzcmNEaXIsIGRlc3REaXIsIG9wdGlvbnMpIHtcbiAgbGV0IGFyZ3MgPSBhcmd4KGFyZ3VtZW50cylcbiAgaWYgKGFyZ3MucG9wKCdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayBpcyBubyBsb25nZXIgc3VwcG9ydGVkLiBVc2UgcHJvbWlzZSBpbnRlcmZhY2UgaW5zdGVhZC4nKVxuICB9XG4gIG9wdGlvbnMgPSBhcmdzLnBvcCgnb2JqZWN0JykgfHwge31cblxuICByZXR1cm4gY28oZnVuY3Rpb24gKiAoKSB7XG4gICAgbGV0IHJlc3VsdHMgPSB5aWVsZCBjb252ZXJ0KHNyY0RpciwgZGVzdERpciwge1xuICAgICAgcGF0dGVybjogb3B0aW9ucy5wYXR0ZXJuIHx8ICcqKi8qLionLFxuICAgICAgcnVsZTogX3J1bGUob3B0aW9ucy5kYXRhLCBvcHRpb25zLnByZWZpeCwgb3B0aW9ucy5zdWZmaXgpLFxuICAgICAgaWdub3JlOiBvcHRpb25zLmlnbm9yZSxcbiAgICAgIG1vZGU6IG9wdGlvbnMubW9kZSxcbiAgICAgIGNsZWFuOiBvcHRpb25zLmNsZWFuLFxuICAgICAgb25jZTogb3B0aW9ucy5vbmNlLFxuICAgICAgb3V0OiBmdW5jdGlvbiAoc3JjKSB7XG4gICAgICAgIHJldHVybiByZW1vdmVFeHRuYW1lKHNyYywgb3B0aW9ucy5leHRuYW1lIHx8ICcudG1wbCcpXG4gICAgICB9XG4gICAgfSlcbiAgICBsZXQgc2hvdWxkTG9nID0gIW9wdGlvbnMuc2lsZW50O1xuICAgIGlmIChzaG91bGRMb2cpIHtcbiAgICAgIF9sb2dSZXN1bHRzKHJlc3VsdHMpXG4gICAgfVxuXG4gICAgLy8gV2FpdCBmb3IgZmx1c2hcbiAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT5cbiAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gcmVzb2x2ZSgpKVxuICAgIClcbiAgICBcbiAgICByZXR1cm4gcmVzdWx0c1xuICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbmRlclxuIl19