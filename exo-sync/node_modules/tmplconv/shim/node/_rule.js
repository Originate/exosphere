/**
 * @function _rule
 * @private
 */

'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var findout = require('findout');
var stringcase = require('stringcase');

var variations = ['camelcase', 'pascalcase', 'spinalcase', 'snakecase', 'uppercase', 'lowercase', 'enumcase', 'cramcase'];

/** @lends _rule */
function _rule(data) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_____';
  var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_____';

  if (typeof data === 'string') {
    data = findout(data) || data;
  }
  data = data || {};
  var _fix = function _fix(key) {
    return [prefix, key, suffix].join('');
  };

  var rule = {};
  (0, _keys2.default)(data).forEach(function (key) {
    var val = data[key];
    rule[_fix(key)] = val;
    variations.forEach(function (variation) {
      if (!stringcase[variation]) {
        console.warn('Unknown variation:', variation);
        return;
      }
      rule[_fix([key, variation].join('@'))] = stringcase[variation](val);
    });
  });
  return rule;
}

_rule.reversed = function _reversedRule(data, prefix, suffix) {
  var rule = _rule(data, prefix, suffix);
  var reversed = {};
  (0, _keys2.default)(rule).forEach(function (key) {
    var val = rule[key];
    reversed[val] = reversed[val] || key;
  });
  return reversed;
};

module.exports = _rule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9ydWxlLmpzIl0sIm5hbWVzIjpbImZpbmRvdXQiLCJyZXF1aXJlIiwic3RyaW5nY2FzZSIsInZhcmlhdGlvbnMiLCJfcnVsZSIsImRhdGEiLCJwcmVmaXgiLCJzdWZmaXgiLCJfZml4Iiwia2V5Iiwiam9pbiIsInJ1bGUiLCJmb3JFYWNoIiwidmFsIiwidmFyaWF0aW9uIiwiY29uc29sZSIsIndhcm4iLCJyZXZlcnNlZCIsIl9yZXZlcnNlZFJ1bGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFLQTs7Ozs7Ozs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxJQUFNQyxhQUFhRCxRQUFRLFlBQVIsQ0FBbkI7O0FBRUEsSUFBTUUsYUFBYSxDQUNqQixXQURpQixFQUVqQixZQUZpQixFQUdqQixZQUhpQixFQUlqQixXQUppQixFQUtqQixXQUxpQixFQU1qQixXQU5pQixFQU9qQixVQVBpQixFQVFqQixVQVJpQixDQUFuQjs7QUFXQTtBQUNBLFNBQVNDLEtBQVQsQ0FBZ0JDLElBQWhCLEVBQTBEO0FBQUEsTUFBcENDLE1BQW9DLHVFQUEzQixPQUEyQjtBQUFBLE1BQWxCQyxNQUFrQix1RUFBVCxPQUFTOztBQUN4RCxNQUFJLE9BQU9GLElBQVAsS0FBZ0IsUUFBcEIsRUFBOEI7QUFDNUJBLFdBQU9MLFFBQVFLLElBQVIsS0FBaUJBLElBQXhCO0FBQ0Q7QUFDREEsU0FBT0EsUUFBUSxFQUFmO0FBQ0EsTUFBTUcsT0FBTyxTQUFQQSxJQUFPLENBQUNDLEdBQUQ7QUFBQSxXQUFTLENBQUVILE1BQUYsRUFBVUcsR0FBVixFQUFlRixNQUFmLEVBQXdCRyxJQUF4QixDQUE2QixFQUE3QixDQUFUO0FBQUEsR0FBYjs7QUFFQSxNQUFJQyxPQUFPLEVBQVg7QUFDQSxzQkFBWU4sSUFBWixFQUFrQk8sT0FBbEIsQ0FBMEIsVUFBQ0gsR0FBRCxFQUFTO0FBQ2pDLFFBQUlJLE1BQU1SLEtBQU1JLEdBQU4sQ0FBVjtBQUNBRSxTQUFNSCxLQUFLQyxHQUFMLENBQU4sSUFBb0JJLEdBQXBCO0FBQ0FWLGVBQVdTLE9BQVgsQ0FBbUIsVUFBQ0UsU0FBRCxFQUFlO0FBQ2hDLFVBQUksQ0FBQ1osV0FBWVksU0FBWixDQUFMLEVBQThCO0FBQzVCQyxnQkFBUUMsSUFBUixDQUFhLG9CQUFiLEVBQW1DRixTQUFuQztBQUNBO0FBQ0Q7QUFDREgsV0FBTUgsS0FBSyxDQUFFQyxHQUFGLEVBQU9LLFNBQVAsRUFBbUJKLElBQW5CLENBQXdCLEdBQXhCLENBQUwsQ0FBTixJQUE2Q1IsV0FBWVksU0FBWixFQUF3QkQsR0FBeEIsQ0FBN0M7QUFDRCxLQU5EO0FBT0QsR0FWRDtBQVdBLFNBQU9GLElBQVA7QUFDRDs7QUFFRFAsTUFBTWEsUUFBTixHQUFpQixTQUFTQyxhQUFULENBQXdCYixJQUF4QixFQUE4QkMsTUFBOUIsRUFBc0NDLE1BQXRDLEVBQThDO0FBQzdELE1BQUlJLE9BQU9QLE1BQU1DLElBQU4sRUFBWUMsTUFBWixFQUFvQkMsTUFBcEIsQ0FBWDtBQUNBLE1BQUlVLFdBQVcsRUFBZjtBQUNBLHNCQUFZTixJQUFaLEVBQWtCQyxPQUFsQixDQUEwQixVQUFDSCxHQUFELEVBQVM7QUFDakMsUUFBSUksTUFBTUYsS0FBTUYsR0FBTixDQUFWO0FBQ0FRLGFBQVVKLEdBQVYsSUFBa0JJLFNBQVVKLEdBQVYsS0FBbUJKLEdBQXJDO0FBQ0QsR0FIRDtBQUlBLFNBQU9RLFFBQVA7QUFDRCxDQVJEOztBQVVBRSxPQUFPQyxPQUFQLEdBQWlCaEIsS0FBakIiLCJmaWxlIjoiX3J1bGUuanMiLCJzb3VyY2VSb290IjoibGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZnVuY3Rpb24gX3J1bGVcbiAqIEBwcml2YXRlXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGZpbmRvdXQgPSByZXF1aXJlKCdmaW5kb3V0JylcbmNvbnN0IHN0cmluZ2Nhc2UgPSByZXF1aXJlKCdzdHJpbmdjYXNlJylcblxuY29uc3QgdmFyaWF0aW9ucyA9IFtcbiAgJ2NhbWVsY2FzZScsXG4gICdwYXNjYWxjYXNlJyxcbiAgJ3NwaW5hbGNhc2UnLFxuICAnc25ha2VjYXNlJyxcbiAgJ3VwcGVyY2FzZScsXG4gICdsb3dlcmNhc2UnLFxuICAnZW51bWNhc2UnLFxuICAnY3JhbWNhc2UnXG5dXG5cbi8qKiBAbGVuZHMgX3J1bGUgKi9cbmZ1bmN0aW9uIF9ydWxlIChkYXRhLCBwcmVmaXggPSAnX19fX18nLCBzdWZmaXggPSAnX19fX18nKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gZmluZG91dChkYXRhKSB8fCBkYXRhXG4gIH1cbiAgZGF0YSA9IGRhdGEgfHwge31cbiAgY29uc3QgX2ZpeCA9IChrZXkpID0+IFsgcHJlZml4LCBrZXksIHN1ZmZpeCBdLmpvaW4oJycpXG5cbiAgbGV0IHJ1bGUgPSB7fVxuICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBsZXQgdmFsID0gZGF0YVsga2V5IF1cbiAgICBydWxlWyBfZml4KGtleSkgXSA9IHZhbFxuICAgIHZhcmlhdGlvbnMuZm9yRWFjaCgodmFyaWF0aW9uKSA9PiB7XG4gICAgICBpZiAoIXN0cmluZ2Nhc2VbIHZhcmlhdGlvbiBdKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignVW5rbm93biB2YXJpYXRpb246JywgdmFyaWF0aW9uKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHJ1bGVbIF9maXgoWyBrZXksIHZhcmlhdGlvbiBdLmpvaW4oJ0AnKSkgXSA9IHN0cmluZ2Nhc2VbIHZhcmlhdGlvbiBdKHZhbClcbiAgICB9KVxuICB9KVxuICByZXR1cm4gcnVsZVxufVxuXG5fcnVsZS5yZXZlcnNlZCA9IGZ1bmN0aW9uIF9yZXZlcnNlZFJ1bGUgKGRhdGEsIHByZWZpeCwgc3VmZml4KSB7XG4gIGxldCBydWxlID0gX3J1bGUoZGF0YSwgcHJlZml4LCBzdWZmaXgpXG4gIGxldCByZXZlcnNlZCA9IHt9XG4gIE9iamVjdC5rZXlzKHJ1bGUpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGxldCB2YWwgPSBydWxlWyBrZXkgXVxuICAgIHJldmVyc2VkWyB2YWwgXSA9IHJldmVyc2VkWyB2YWwgXSB8fCBrZXlcbiAgfSlcbiAgcmV0dXJuIHJldmVyc2VkXG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3J1bGVcbiJdfQ==