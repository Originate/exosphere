/**
 * Generate template from rendered.
 * @memberof module:tmplconv/lib
 * @function tmplify
 * @param {string} srcDir - Name of destination directory.
 * @param {string} destDir - Name of destination directory, which contains template files.
 * @param {object} options - Optional settings.
 * @param {string|object} options.data - Data for tmpls.
 * @param {string|string[]} options.pattern - Source patterns.
 * @param {string|string[]} [options.ignore] - Filename pattern.
 * @param {string} [options.prefix='_____'] - Embed prefix.
 * @param {string} [options.suffix='_____'] - Embed suffix.
 * @param {string} [options.extname='.tmpl'] - Template extension name.
 * @param {boolean} [options.silent=false] - Silent or not.
 * @param {string} [options.mode='644'] - File permission to generate.
 * @param {boolean} [options.clean=false] - Cleanup destination directory before convert.
 * @param {boolean} [options.once=false] - Write only first time. Skip if already exists.
 * @returns {Promise}
 */

'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argx = require('argx');
var convert = require('./converting/convert');
var addExtname = require('./naming/add_extname');
var _rule = require('./_rule');
var _logResults = require('./_log_results');
var co = require('co');

/** @lends tmplify */
function tmplify(srcDir, destDir, options) {
  var args = argx(arguments);
  if (args.pop('function')) {
    throw new Error('Callback is no longer supported. Use promise interface instead.');
  }
  options = args.pop('object') || {};

  return co(_regenerator2.default.mark(function _callee() {
    var results, shouldLog;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return convert(srcDir, destDir, {
              pattern: options.pattern || '**/*.*',
              rule: _rule.reversed(options.data, options.prefix, options.suffix),
              ignore: options.ignore || 'node_modules/**/*.*',
              mode: options.mode,
              clean: options.clean,
              once: options.once,
              out: function out(src) {
                return addExtname(src, options.extname || '.tmpl');
              }
            });

          case 2:
            results = _context.sent;
            shouldLog = !options.silent;

            if (shouldLog) {
              _logResults(results);
            }

            // Wait for flush
            _context.next = 7;
            return new _promise2.default(function (resolve) {
              return process.nextTick(function () {
                return resolve();
              });
            });

          case 7:
            return _context.abrupt('return', results);

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
}

module.exports = tmplify;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRtcGxpZnkuanMiXSwibmFtZXMiOlsiYXJneCIsInJlcXVpcmUiLCJjb252ZXJ0IiwiYWRkRXh0bmFtZSIsIl9ydWxlIiwiX2xvZ1Jlc3VsdHMiLCJjbyIsInRtcGxpZnkiLCJzcmNEaXIiLCJkZXN0RGlyIiwib3B0aW9ucyIsImFyZ3MiLCJhcmd1bWVudHMiLCJwb3AiLCJFcnJvciIsInBhdHRlcm4iLCJydWxlIiwicmV2ZXJzZWQiLCJkYXRhIiwicHJlZml4Iiwic3VmZml4IiwiaWdub3JlIiwibW9kZSIsImNsZWFuIiwib25jZSIsIm91dCIsInNyYyIsImV4dG5hbWUiLCJyZXN1bHRzIiwic2hvdWxkTG9nIiwic2lsZW50IiwicmVzb2x2ZSIsInByb2Nlc3MiLCJuZXh0VGljayIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNQyxVQUFVRCxRQUFRLHNCQUFSLENBQWhCO0FBQ0EsSUFBTUUsYUFBYUYsUUFBUSxzQkFBUixDQUFuQjtBQUNBLElBQU1HLFFBQVFILFFBQVEsU0FBUixDQUFkO0FBQ0EsSUFBTUksY0FBY0osUUFBUSxnQkFBUixDQUFwQjtBQUNBLElBQU1LLEtBQUtMLFFBQVEsSUFBUixDQUFYOztBQUVBO0FBQ0EsU0FBU00sT0FBVCxDQUFrQkMsTUFBbEIsRUFBMEJDLE9BQTFCLEVBQW1DQyxPQUFuQyxFQUE0QztBQUMxQyxNQUFJQyxPQUFPWCxLQUFLWSxTQUFMLENBQVg7QUFDQSxNQUFJRCxLQUFLRSxHQUFMLENBQVMsVUFBVCxDQUFKLEVBQTBCO0FBQ3hCLFVBQU0sSUFBSUMsS0FBSixDQUFVLGlFQUFWLENBQU47QUFDRDtBQUNESixZQUFVQyxLQUFLRSxHQUFMLENBQVMsUUFBVCxLQUFzQixFQUFoQzs7QUFFQSxTQUFPUCw4QkFBRztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQUNZSixRQUFRTSxNQUFSLEVBQWdCQyxPQUFoQixFQUF5QjtBQUMzQ00sdUJBQVNMLFFBQVFLLE9BQVIsSUFBbUIsUUFEZTtBQUUzQ0Msb0JBQU1aLE1BQU1hLFFBQU4sQ0FBZVAsUUFBUVEsSUFBdkIsRUFBNkJSLFFBQVFTLE1BQXJDLEVBQTZDVCxRQUFRVSxNQUFyRCxDQUZxQztBQUczQ0Msc0JBQVFYLFFBQVFXLE1BQVIsSUFBa0IscUJBSGlCO0FBSTNDQyxvQkFBTVosUUFBUVksSUFKNkI7QUFLM0NDLHFCQUFPYixRQUFRYSxLQUw0QjtBQU0zQ0Msb0JBQU1kLFFBQVFjLElBTjZCO0FBTzNDQyxpQkFQMkMsZUFPdENDLEdBUHNDLEVBT2pDO0FBQ1IsdUJBQU92QixXQUFXdUIsR0FBWCxFQUFnQmhCLFFBQVFpQixPQUFSLElBQW1CLE9BQW5DLENBQVA7QUFDRDtBQVQwQyxhQUF6QixDQURaOztBQUFBO0FBQ0pDLG1CQURJO0FBWUpDLHFCQVpJLEdBWVEsQ0FBQ25CLFFBQVFvQixNQVpqQjs7QUFhUixnQkFBSUQsU0FBSixFQUFlO0FBQ2J4QiwwQkFBWXVCLE9BQVo7QUFDRDs7QUFFRDtBQWpCUTtBQUFBLG1CQWtCRixzQkFBWSxVQUFDRyxPQUFEO0FBQUEscUJBQ2hCQyxRQUFRQyxRQUFSLENBQWlCO0FBQUEsdUJBQU1GLFNBQU47QUFBQSxlQUFqQixDQURnQjtBQUFBLGFBQVosQ0FsQkU7O0FBQUE7QUFBQSw2Q0FzQkRILE9BdEJDOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQUgsRUFBUDtBQXdCRDs7QUFFRE0sT0FBT0MsT0FBUCxHQUFpQjVCLE9BQWpCIiwiZmlsZSI6InRtcGxpZnkuanMiLCJzb3VyY2VSb290IjoibGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZW5lcmF0ZSB0ZW1wbGF0ZSBmcm9tIHJlbmRlcmVkLlxuICogQG1lbWJlcm9mIG1vZHVsZTp0bXBsY29udi9saWJcbiAqIEBmdW5jdGlvbiB0bXBsaWZ5XG4gKiBAcGFyYW0ge3N0cmluZ30gc3JjRGlyIC0gTmFtZSBvZiBkZXN0aW5hdGlvbiBkaXJlY3RvcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGVzdERpciAtIE5hbWUgb2YgZGVzdGluYXRpb24gZGlyZWN0b3J5LCB3aGljaCBjb250YWlucyB0ZW1wbGF0ZSBmaWxlcy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MuXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IG9wdGlvbnMuZGF0YSAtIERhdGEgZm9yIHRtcGxzLlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IG9wdGlvbnMucGF0dGVybiAtIFNvdXJjZSBwYXR0ZXJucy5cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbb3B0aW9ucy5pZ25vcmVdIC0gRmlsZW5hbWUgcGF0dGVybi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5wcmVmaXg9J19fX19fJ10gLSBFbWJlZCBwcmVmaXguXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc3VmZml4PSdfX19fXyddIC0gRW1iZWQgc3VmZml4LlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmV4dG5hbWU9Jy50bXBsJ10gLSBUZW1wbGF0ZSBleHRlbnNpb24gbmFtZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuc2lsZW50PWZhbHNlXSAtIFNpbGVudCBvciBub3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubW9kZT0nNjQ0J10gLSBGaWxlIHBlcm1pc3Npb24gdG8gZ2VuZXJhdGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNsZWFuPWZhbHNlXSAtIENsZWFudXAgZGVzdGluYXRpb24gZGlyZWN0b3J5IGJlZm9yZSBjb252ZXJ0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5vbmNlPWZhbHNlXSAtIFdyaXRlIG9ubHkgZmlyc3QgdGltZS4gU2tpcCBpZiBhbHJlYWR5IGV4aXN0cy5cbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBhcmd4ID0gcmVxdWlyZSgnYXJneCcpXG5jb25zdCBjb252ZXJ0ID0gcmVxdWlyZSgnLi9jb252ZXJ0aW5nL2NvbnZlcnQnKVxuY29uc3QgYWRkRXh0bmFtZSA9IHJlcXVpcmUoJy4vbmFtaW5nL2FkZF9leHRuYW1lJylcbmNvbnN0IF9ydWxlID0gcmVxdWlyZSgnLi9fcnVsZScpXG5jb25zdCBfbG9nUmVzdWx0cyA9IHJlcXVpcmUoJy4vX2xvZ19yZXN1bHRzJylcbmNvbnN0IGNvID0gcmVxdWlyZSgnY28nKVxuXG4vKiogQGxlbmRzIHRtcGxpZnkgKi9cbmZ1bmN0aW9uIHRtcGxpZnkgKHNyY0RpciwgZGVzdERpciwgb3B0aW9ucykge1xuICBsZXQgYXJncyA9IGFyZ3goYXJndW1lbnRzKVxuICBpZiAoYXJncy5wb3AoJ2Z1bmN0aW9uJykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuIFVzZSBwcm9taXNlIGludGVyZmFjZSBpbnN0ZWFkLicpXG4gIH1cbiAgb3B0aW9ucyA9IGFyZ3MucG9wKCdvYmplY3QnKSB8fCB7fVxuXG4gIHJldHVybiBjbyhmdW5jdGlvbiAqICgpIHtcbiAgICBsZXQgcmVzdWx0cyA9IHlpZWxkIGNvbnZlcnQoc3JjRGlyLCBkZXN0RGlyLCB7XG4gICAgICBwYXR0ZXJuOiBvcHRpb25zLnBhdHRlcm4gfHwgJyoqLyouKicsXG4gICAgICBydWxlOiBfcnVsZS5yZXZlcnNlZChvcHRpb25zLmRhdGEsIG9wdGlvbnMucHJlZml4LCBvcHRpb25zLnN1ZmZpeCksXG4gICAgICBpZ25vcmU6IG9wdGlvbnMuaWdub3JlIHx8ICdub2RlX21vZHVsZXMvKiovKi4qJyxcbiAgICAgIG1vZGU6IG9wdGlvbnMubW9kZSxcbiAgICAgIGNsZWFuOiBvcHRpb25zLmNsZWFuLFxuICAgICAgb25jZTogb3B0aW9ucy5vbmNlLFxuICAgICAgb3V0IChzcmMpIHtcbiAgICAgICAgcmV0dXJuIGFkZEV4dG5hbWUoc3JjLCBvcHRpb25zLmV4dG5hbWUgfHwgJy50bXBsJylcbiAgICAgIH1cbiAgICB9KVxuICAgIGxldCBzaG91bGRMb2cgPSAhb3B0aW9ucy5zaWxlbnRcbiAgICBpZiAoc2hvdWxkTG9nKSB7XG4gICAgICBfbG9nUmVzdWx0cyhyZXN1bHRzKVxuICAgIH1cblxuICAgIC8vIFdhaXQgZm9yIGZsdXNoXG4gICAgeWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHJlc29sdmUoKSlcbiAgICApXG5cbiAgICByZXR1cm4gcmVzdWx0c1xuICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRtcGxpZnlcbiJdfQ==