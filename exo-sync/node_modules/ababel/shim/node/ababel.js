/**
 * Compile files
 * @function ababel
 * @param {string} pattern - Glob file name pattern
 * @param {Object} [options] - Optional settings
 * @param {string} [options.status] - Status file path
 * @param {string} [options.cwd] - Current working directory path
 * @param {string} [options.out] - Output directory path
 * @param {boolean} [options.minified] - Minified or not
 * @param {string[]} [options.reflects] - File patterns to reflects changes
 * @returns {Promise}
 */
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var aglob = require('aglob');
var convertSourceMap = require('convert-source-map');
var writeout = require('writeout');
var akvStatus = require('akv-status');
var co = require('co');
var path = require('path');
var filedel = require('filedel');

var _require = require('asfs');

var statAsync = _require.statAsync;

var _require2 = require('asenv');

var isProduction = _require2.isProduction;

var _require3 = require('babel-core');

var transformFile = _require3.transformFile;

var _require4 = require('./constants');

var DEFAULT_PRESET = _require4.DEFAULT_PRESET;
var DEFAULT_EXT = _require4.DEFAULT_EXT;

var _require5 = require('./helpers/file_helper');

var replaceExt = _require5.replaceExt;

var relative = function relative(filename) {
  return path.relative(process.cwd(), filename);
};
var mtime = function mtime(filename) {
  return statAsync(filename).catch(function () {
    return null;
  }).then(function (_ref) {
    var mtime = _ref.mtime;
    return mtime;
  });
};

/** @lends ababel */
function ababel(pattern) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$status = options.status;
  var status = _options$status === undefined ? 'tmp/ababel.status.json' : _options$status;
  var _options$cwd = options.cwd;
  var cwd = _options$cwd === undefined ? process.cwd() : _options$cwd;
  var _options$out = options.out;
  var out = _options$out === undefined ? process.cwd() : _options$out;
  var _options$presets = options.presets;
  var presets = _options$presets === undefined ? DEFAULT_PRESET.split(',') : _options$presets;
  var _options$sourceMaps = options.sourceMaps;
  var sourceMaps = _options$sourceMaps === undefined ? !isProduction() : _options$sourceMaps;
  var _options$minified = options.minified;
  var minified = _options$minified === undefined ? false : _options$minified;
  var _options$ignore = options.ignore;
  var ignore = _options$ignore === undefined ? [] : _options$ignore;
  var _options$reflects = options.reflects;
  var reflects = _options$reflects === undefined ? [] : _options$reflects;
  var _options$ext = options.ext;
  var ext = _options$ext === undefined ? DEFAULT_EXT.split(',') : _options$ext;


  var store = akvStatus(status);
  return co(_regenerator2.default.mark(function _callee() {
    var _this = this;

    var filenames, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, _ret;

    return _regenerator2.default.wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return aglob(pattern, { cwd: cwd, ignore: ignore });

          case 2:
            filenames = _context2.sent;
            _context2.next = 5;
            return aglob(reflects);

          case 5:
            reflects = _context2.sent;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context2.prev = 9;
            _loop = _regenerator2.default.mark(function _loop() {
              var filename, src, dest, changed, srcMtime, destMtime, skip, _ref2, code, map, ast, _ref3, skipped;

              return _regenerator2.default.wrap(function _loop$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      filename = _step.value;
                      src = path.resolve(cwd, filename);
                      dest = path.resolve(out, ext.reduce(function (filename, ext) {
                        return replaceExt(filename, ext, '.js');
                      }, filename));

                      if (isProduction()) {
                        _context.next = 17;
                        break;
                      }

                      _context.next = 6;
                      return store.filterStatusUnknown([src, dest].concat((0, _toConsumableArray3.default)(reflects)));

                    case 6:
                      changed = _context.sent;

                      if (!(changed.length === 0)) {
                        _context.next = 17;
                        break;
                      }

                      _context.next = 10;
                      return mtime(src);

                    case 10:
                      srcMtime = _context.sent;
                      _context.next = 13;
                      return mtime(dest);

                    case 13:
                      destMtime = _context.sent;
                      skip = srcMtime && destMtime && srcMtime <= destMtime;

                      if (!skip) {
                        _context.next = 17;
                        break;
                      }

                      return _context.abrupt('return', 'continue');

                    case 17:
                      _context.next = 19;
                      return new _promise2.default(function (resolve, reject) {
                        var options = {
                          presets: presets,
                          minified: minified,
                          sourceMaps: sourceMaps,
                          compact: false,
                          babelrc: false,
                          sourceRoot: path.relative(process.cwd(), cwd),
                          plugins: ['transform-runtime']
                        };
                        transformFile(src, options, function (err, result) {
                          return err ? reject(err) : resolve(result);
                        });
                      });

                    case 19:
                      _ref2 = _context.sent;
                      code = _ref2.code;
                      map = _ref2.map;
                      ast = _ref2.ast;
                      _context.prev = 23;

                      if (!(dest !== src)) {
                        _context.next = 27;
                        break;
                      }

                      _context.next = 27;
                      return filedel(dest);

                    case 27:
                      _context.next = 31;
                      break;

                    case 29:
                      _context.prev = 29;
                      _context.t0 = _context['catch'](23);

                    case 31:
                      _context.next = 33;
                      return writeout(dest, code + '\n' + convertSourceMap.fromObject(map).toComment(), {
                        mkdirp: true,
                        skipIfIdentical: true
                      });

                    case 33:
                      _ref3 = _context.sent;
                      skipped = _ref3.skipped;

                      if (!skipped) {
                        console.log('File generated: ' + relative(dest));
                      }

                      _context.next = 38;
                      return store.saveStatus([src, dest].concat((0, _toConsumableArray3.default)(reflects)));

                    case 38:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _loop, _this, [[23, 29]]);
            });
            _iterator = (0, _getIterator3.default)(filenames);

          case 12:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context2.next = 20;
              break;
            }

            return _context2.delegateYield(_loop(), 't0', 14);

          case 14:
            _ret = _context2.t0;

            if (!(_ret === 'continue')) {
              _context2.next = 17;
              break;
            }

            return _context2.abrupt('continue', 17);

          case 17:
            _iteratorNormalCompletion = true;
            _context2.next = 12;
            break;

          case 20:
            _context2.next = 26;
            break;

          case 22:
            _context2.prev = 22;
            _context2.t1 = _context2['catch'](9);
            _didIteratorError = true;
            _iteratorError = _context2.t1;

          case 26:
            _context2.prev = 26;
            _context2.prev = 27;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 29:
            _context2.prev = 29;

            if (!_didIteratorError) {
              _context2.next = 32;
              break;
            }

            throw _iteratorError;

          case 32:
            return _context2.finish(29);

          case 33:
            return _context2.finish(26);

          case 34:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee, this, [[9, 22, 26, 34], [27,, 29, 33]]);
  })).catch(function (err) {
    return co(_regenerator2.default.mark(function _callee2() {
      return _regenerator2.default.wrap(function _callee2$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return store.destroy();

            case 2:
              throw err;

            case 3:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee2, this);
    }));
  });
}

module.exports = ababel;
//# sourceMappingURL=data:application/json;base64,