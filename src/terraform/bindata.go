// Code generated by go-bindata.
// sources:
// src/terraform/templates/aws.tf
// src/terraform/templates/exocom.tf
// src/terraform/templates/private_service.tf
// src/terraform/templates/public_service.tf
// DO NOT EDIT!

package terraform

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _srcTerraformTemplatesAwsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x6e\xc4\x20\x0c\x86\x77\x9e\xc2\x42\x9d\x73\x3d\x75\xea\x90\xa5\x0f\xd0\xa9\x5b\x55\x45\x3e\xf0\x55\x28\x04\x52\x03\x39\x9d\x22\xde\xbd\x82\x24\xf4\x86\x66\x8a\xed\xef\xb7\xff\x9f\x48\xcc\x78\xf5\x3c\xc1\x2a\x00\x98\x7e\x92\x61\xd2\xc3\x42\x1c\x8c\x77\xd0\x83\xec\xe1\xb9\x7b\xed\xce\x67\x29\x04\xc0\x05\xd5\x48\x4e\x83\x0c\x2f\xb2\x2a\x00\x2e\x49\x8d\x14\xcb\x5f\xa1\xd7\x35\x44\x8c\xf4\x56\x9b\x39\xcb\x8a\x8c\x74\x87\xfd\xeb\x41\x6a\x5a\x4e\xed\x6c\x17\xaf\x55\xb0\x81\x4c\xdf\xe5\x6a\xdb\xb5\xd5\xc7\x1a\xeb\xd5\x38\x44\xbc\x58\xda\xa6\xa5\xfe\x28\xe5\x06\x64\x91\x85\x98\xd9\x2f\x46\x13\x83\xc4\x5b\x90\x7b\xa8\xb6\x14\x1e\x6c\x3c\xad\x0b\x72\xb7\x5f\x28\xfa\x99\xfd\xd5\x58\xfa\x9f\xc3\x5b\x18\x76\xa0\xc2\x68\xad\xbf\x91\x1e\x50\x29\x9f\x5c\x1c\x8c\x0e\xd0\xc3\xe7\x41\xb7\x6e\x96\x5f\xc5\xd6\xe4\x75\xb2\xf4\x60\x2a\xf8\xc4\xaa\xe6\xe8\x4e\xa5\x59\x1e\xd7\xe1\x44\x7f\xd9\x71\x9e\xdf\x71\xda\xb3\x91\x5b\x9a\xa1\x99\xbd\x4e\x2a\x1a\xef\xca\x64\xa4\xfb\x50\x85\xcd\xea\xd1\xc9\x52\x64\xf1\x1b\x00\x00\xff\xff\xf5\x7a\xcf\x95\xe0\x01\x00\x00")

func srcTerraformTemplatesAwsTfBytes() ([]byte, error) {
	return bindataRead(
		_srcTerraformTemplatesAwsTf,
		"src/terraform/templates/aws.tf",
	)
}

func srcTerraformTemplatesAwsTf() (*asset, error) {
	bytes, err := srcTerraformTemplatesAwsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/terraform/templates/aws.tf", size: 480, mode: os.FileMode(420), modTime: time.Unix(1502404430, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcTerraformTemplatesExocomTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4f\x6b\xdc\x30\x10\xc5\xef\xfa\x14\x83\xe8\xb1\xf5\x26\xe9\xa5\x87\xec\xa9\xb8\x10\x28\x2c\x6c\xda\x5e\x4a\x10\xb2\x3c\x6c\x45\x2c\xc9\xe8\x8f\x93\xad\xd1\x77\x2f\x92\xed\x6c\xec\x5d\x37\xad\x2f\x0b\x3b\xbf\x99\xa7\x79\xd2\x53\xa6\x0e\x0d\x02\xc5\x67\x23\x8c\x62\xa2\x09\xce\xa3\xa5\xd0\x13\x00\x67\x82\x15\x08\x5b\xa0\xc5\x86\x3f\xb9\x8d\x08\xce\x1b\xb5\x19\xd0\xf1\xe7\xc3\xd4\x41\x08\x00\xef\xb8\x6c\x78\x25\x1b\xe9\x8f\xec\xb7\xd1\xe8\xe0\xe5\xdb\x02\x7d\xd7\x0f\x6a\x05\x7f\x72\xc5\x39\x1b\x29\x01\x40\xdd\xc1\xda\xb7\x05\xda\x5a\x53\x07\xe1\xa5\xd1\x09\x96\xda\xa3\xd5\xbc\x61\xbf\x8c\xf3\x58\xe7\x31\x4c\xd6\x17\xf5\x5e\xd8\x11\x8a\xc3\x00\xe7\xb9\x16\xc8\xfc\xb1\xc5\x73\x35\x7f\x53\x28\x29\xac\x49\xe8\x23\x1e\x99\xe6\x6a\x49\x9d\xb4\x3a\x6e\x8b\x09\xca\xc3\xd7\xe8\xb1\x63\xf0\x2f\x81\x16\x0f\xd2\xe8\x55\x70\xb6\xc6\xc0\xc6\x6c\x77\xc5\x5d\x72\x82\x39\x14\xc1\x26\x1b\x0f\xd6\x84\x76\xea\xfb\x39\x6f\xbc\x0c\x47\xfa\x90\x26\xa1\x70\xd3\xd5\x2f\x00\x97\x26\x2d\xce\xb0\x4e\x47\xfa\x9e\x24\xf5\x05\xff\x3c\x5a\xcf\x9b\xea\x62\x43\x3e\x83\x0b\x95\x46\xcf\x64\xed\xde\x76\xa1\xb5\xb2\xe3\x1e\xd9\xa9\x27\x3b\xde\xb5\x62\xba\xfe\x37\x47\x0c\x6c\xa4\x24\x12\xb2\x08\x81\x43\xdb\x49\x81\xff\x11\x82\xa9\x23\xed\x31\x39\x33\x3f\xc8\x6b\xf9\x79\xd6\x8a\x53\x43\x5e\x42\x18\xa5\xb8\x5e\x6e\x91\xee\xb3\x92\x7a\x14\xa4\x0f\x19\xd4\x9e\x4b\x8d\x96\xb5\xc6\xfa\x57\x42\x1f\xaf\xaf\xae\xf2\xa4\x36\xb0\xa0\xa5\x77\x4b\x23\xae\x6f\x3e\xa5\x7a\x6d\xc4\x63\xd2\x55\xfc\x80\xb3\x7a\xdf\xf7\x43\xed\x2e\x95\x62\xfc\x4b\x32\xcf\x32\x89\xba\x93\xd6\x68\x85\xda\xb3\x8e\x5b\xc9\xab\x06\xd3\x23\xea\xf3\xc3\xd8\xef\xbe\x96\xf3\xc7\x0f\x70\x5f\xee\x7f\xdc\x7d\x2e\xd9\x7e\xf7\xfd\x5b\x79\x0f\x5b\xb8\xbd\x2d\x77\x5f\x48\xdf\xf7\xa3\xad\x7b\x13\x3c\xba\x18\x23\x49\xff\x03\x44\x02\xa0\x50\x19\x7b\x64\x16\x13\xc3\xfd\x98\x9f\xd3\x6e\x97\xc3\xf7\x0f\xb1\x5b\x0d\x5c\x24\x7f\x02\x00\x00\xff\xff\xfb\xae\x4c\xc8\x2c\x05\x00\x00")

func srcTerraformTemplatesExocomTfBytes() ([]byte, error) {
	return bindataRead(
		_srcTerraformTemplatesExocomTf,
		"src/terraform/templates/exocom.tf",
	)
}

func srcTerraformTemplatesExocomTf() (*asset, error) {
	bytes, err := srcTerraformTemplatesExocomTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/terraform/templates/exocom.tf", size: 1324, mode: os.FileMode(420), modTime: time.Unix(1502404871, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcTerraformTemplatesPrivate_serviceTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x41\x6a\x03\x31\x0c\x45\xf7\x3e\x85\x30\xd9\x76\x42\x0f\x90\x55\x57\xdd\xf6\x02\xc1\xd8\x22\x98\x8c\xad\x41\xb6\x67\x28\x42\x77\x2f\xb6\x03\x69\xa2\xe5\x7f\xef\xeb\x27\x0a\x6d\x45\xb0\x22\x05\x79\x8f\x1e\x7f\x68\x45\x55\x0b\x62\x00\x0a\x35\xf6\x08\x17\xb0\xcb\xd9\x1d\xe5\x7c\x10\xdf\x91\x3f\x1e\xa6\x35\x06\x20\xbb\x34\x84\xf7\x7e\x67\x7e\x6d\xa5\x22\x5f\x63\x00\x80\x2e\x9d\x64\xce\x2d\xee\x28\xcb\x93\xaa\xed\x32\xa5\xe4\xf2\x30\x87\x2c\x22\xa5\x3a\xae\x6d\xfb\x9a\x44\x55\xbb\xb6\x35\x78\xde\x18\xf6\x5b\xd3\xf1\x22\x60\x89\x8c\xe1\xea\xa9\xe5\x0a\x17\xf8\xec\x19\xf9\x7b\x1f\x49\xee\x86\x0f\x5f\x66\xf6\xdd\x23\x9d\x4d\xcc\xfb\xeb\xd7\x8d\x29\x34\x5f\x23\xe5\x8e\x13\x26\xe2\xdf\x97\xd1\x19\xcd\x36\xe3\x2d\x52\xfe\x87\x4f\xb2\x3b\x5e\x66\xac\xd6\xa8\xf9\x0b\x00\x00\xff\xff\x46\x58\x4d\x8c\x66\x01\x00\x00")

func srcTerraformTemplatesPrivate_serviceTfBytes() ([]byte, error) {
	return bindataRead(
		_srcTerraformTemplatesPrivate_serviceTf,
		"src/terraform/templates/private_service.tf",
	)
}

func srcTerraformTemplatesPrivate_serviceTf() (*asset, error) {
	bytes, err := srcTerraformTemplatesPrivate_serviceTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/terraform/templates/private_service.tf", size: 358, mode: os.FileMode(420), modTime: time.Unix(1502404432, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcTerraformTemplatesPublic_serviceTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\xcd\x8e\xdc\x20\x10\x84\xef\x7e\x8a\x96\x95\x6b\x66\x95\x07\x98\xd3\x9e\x72\x8b\x72\x8d\x22\xc4\xe0\xce\x0c\x1a\x4c\xa3\xa6\x99\xcd\x06\xf1\xee\x91\xc1\x9e\x3f\x7b\x97\x6b\x7d\x55\x14\xee\xf6\x48\x43\x72\x08\x7d\xce\x11\xf9\x62\x0d\xfe\x24\x87\xa5\xf4\x90\x3b\x80\x48\x89\x0d\xc2\x1e\xfa\xdd\x8b\x7e\x8b\x2f\x21\x1d\x9c\x35\x5f\x67\xb2\xef\x3a\x00\xaf\xc7\x0a\x3c\xfb\x27\x4d\xbb\x83\x8a\x68\x12\x5b\x79\x57\x47\xa6\x14\x00\x00\xf6\xf0\xab\xff\x92\xdb\xbd\x3b\xfd\x16\x77\xf8\x57\x90\xbd\x76\x6a\xcd\x97\xfe\xf7\x92\x93\x0e\x1e\x45\xd9\x21\xc2\x7c\x56\x39\xad\xdd\x1d\xd9\xdc\xc6\xa5\x28\xc8\xca\x0e\x70\x77\xf6\xf0\x68\xbe\x51\xa5\x9f\x4c\x34\x8e\xda\x3f\x38\xaa\x29\xe7\x1c\x45\xb3\xa4\xf0\xda\x88\x52\x4a\xc5\xbd\x68\xeb\x91\x55\x20\x96\xbb\x3b\x72\x6e\xad\x7e\x10\x4b\x69\xc9\x21\xc1\xfa\x54\xd4\x84\xd4\x98\x01\xa3\x65\x1c\x94\xa1\xe4\xe5\x8e\xf9\x36\x69\x64\xce\x53\xcf\x51\x1f\xf1\xc9\x9f\x9b\xf6\x7d\x92\x4a\x4b\x42\x13\x15\x93\x43\xa5\xd9\x7f\xfc\xf8\x89\x9a\xc7\xa7\xac\x1e\xaf\x8e\x16\xe1\x2f\xdb\x85\x03\xd3\x90\x8c\x58\xf2\x15\x5b\xa6\x38\xf8\xa8\xea\x56\xdc\x7a\x25\x76\x4b\x9f\x85\xfa\x47\x1e\xaf\x23\xa9\x7d\x2e\x9a\x77\x27\x8a\x82\xc3\x22\x56\xc7\x09\xb5\x93\x93\x32\x27\x34\x67\x85\x7e\x08\x64\xbd\xcc\xb9\x4d\x7b\x9d\xa4\x39\xdf\xfa\x0f\x5a\x3c\xbc\x77\x45\x3d\x7a\xd7\xdd\xb6\xbc\x1b\x5d\x1d\x1d\xd5\x21\x99\x33\xca\x67\xab\x76\xa3\x16\xdf\x88\x23\xf1\xfb\xe6\x4e\x34\xa9\x3d\x8e\xf1\x68\xc9\x6f\x60\xed\xe3\x35\xb9\x92\x31\x3a\x65\x90\xc5\xfe\xb1\x46\xcb\x32\xfd\x2b\xb9\x21\x57\xdb\x25\x98\xa7\xdf\x64\xab\x7f\xa3\x4a\xdf\x95\xee\x7f\x00\x00\x00\xff\xff\x3c\x92\xdc\xb5\x3e\x04\x00\x00")

func srcTerraformTemplatesPublic_serviceTfBytes() ([]byte, error) {
	return bindataRead(
		_srcTerraformTemplatesPublic_serviceTf,
		"src/terraform/templates/public_service.tf",
	)
}

func srcTerraformTemplatesPublic_serviceTf() (*asset, error) {
	bytes, err := srcTerraformTemplatesPublic_serviceTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/terraform/templates/public_service.tf", size: 1086, mode: os.FileMode(420), modTime: time.Unix(1502404432, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"src/terraform/templates/aws.tf": srcTerraformTemplatesAwsTf,
	"src/terraform/templates/exocom.tf": srcTerraformTemplatesExocomTf,
	"src/terraform/templates/private_service.tf": srcTerraformTemplatesPrivate_serviceTf,
	"src/terraform/templates/public_service.tf": srcTerraformTemplatesPublic_serviceTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"src": &bintree{nil, map[string]*bintree{
		"terraform": &bintree{nil, map[string]*bintree{
			"templates": &bintree{nil, map[string]*bintree{
				"aws.tf": &bintree{srcTerraformTemplatesAwsTf, map[string]*bintree{}},
				"exocom.tf": &bintree{srcTerraformTemplatesExocomTf, map[string]*bintree{}},
				"private_service.tf": &bintree{srcTerraformTemplatesPrivate_serviceTf, map[string]*bintree{}},
				"public_service.tf": &bintree{srcTerraformTemplatesPublic_serviceTf, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

