#!/usr/bin/env lsc

require! {
  'chalk' : {bold, red, cyan, yellow, green}
  'fs'
  'child_process'
  'inquirer'
  'path'
  'replace-in-file' : replace
  'semver'
  'shelljs/global'
}

SUBPROJECTS_TO_PUBLISH = <[ cli
                            exo-deploy
                            exo-lint
                            exo-run
                            exo-setup
                            exo-sync
                            exo-test
                            exosphere-shared ]>
                            # website          ]>


{name, version} = require '../package.json'

function main
  if process.argv.length != 3
    display-help!

  @level = process.argv[2]
  display-help! if @level in ['-h, --help']

  @target-version = get-target-version version, @level

  <- confirm-target-version

  # verify workspace is clean
  ensure-in-root-dir!
  ensure-no-open-files!
  ensure-on-master!

  # ensure up to date
  check-npm-dependencies!

  # ensure CHANGLOG includes latest changes
  verify-changelog!

  # update Exocom version / ensure tests pass
  @exocom-version = get-exocom-version!
  update-exocom-dependencies!
  build-subprojects!
  run-tests!
  push-exocom-updates!

  # update Exosphere version
  bump-version-number!
  push-version-number!
  publish-to-npm!
  push-exo-deploy-docker-image!
  push-git-tags!


function check-npm-dependencies
  console.log green "Checking npm dependencies...\n"
  run-command-in-subdirs './node_modules/.bin/update-check'
  console.log!


function verify-changelog
  console.log green "Verifying CHANGELOG.md...\n"
  data = fs.read-file-sync './CHANGELOG.md'
  found = data |> (.to-string!) |> (.match (new RegExp "## #{@target-version}", "g"))
  if not found
    console.log red "CHANGELOG.md has not been updated with #{@target-version} changes"
    process.exit 1
  console.log!


function get-exocom-version
  (child_process.exec-sync 'npm view exocom-dev version', {encoding: 'utf-8'}).trim!


function update-exocom-dependencies
  console.log green "Updating ExoCom dependencies...\n"
  update-exocom-package-versions!
  update-exocom-dependency-number!
  console.log!


function update-exocom-package-versions
  try
    replace.sync do
      files: ['exosphere-shared/**/*.json', 'website/**/*.json']
      replace:
        /"exorelay": "\d+.\d+.\d+"/g
        /"exoservice": "\d+.\d+.\d+"/g
        /"exocom-mock": "\d+.\d+.\d+"/g
        /"exocom-dev": "\d+.\d+.\d+"/g
      with:
        "\"exorelay\": \"#{@exocom-version}\""
        "\"exoservice\": \"#{@exocom-version}\""
        "\"exocom-mock\": \"#{@exocom-version}\""
        "\"exocom-dev\": \"#{@exocom-version}\""
  catch error
    console.log error
    process.exit 1


function update-exocom-dependency-number
  try
    replace.sync do
      files: ['**/*.feature', 'exosphere-shared/**/*.yml']
      replace: /type: exocom\n(\s*)version: \d+.\d+.\d+/g
      with:
        """
        type: exocom
        $1version: #{@exocom-version}
        """
    replace.sync do
      files: ['**/features/**/*.ls', '**/*.feature']
      replace: /exocom\d+.\d+.\d+/g
      with: "exocom#{@exocom-version}"
    replace.sync do
      files: ['**/features/**/*.ls']
      replace: /exocom-version(.+)\d+.\d+.\d+/g
      with: "exocom-version$1#{@exocom-version}"
    replace.sync do
      files: ['**/features/**/*.feature']
      replace: /ExoCom version(.+)\d+.\d+.\d+/g
      with: "ExoCom version$1#{@exocom-version}"
  catch error
    console.log error
    process.exit 1


function build-subprojects
  console.log green "Building subprojects...\n"
  run-command-in-subdirs './node_modules/.bin/build'
  console.log!


function run-tests
  console.log green "Running tests in subprojects...\n"
  run-command-in-subdirs './bin/spec'
  console.log!


function push-exocom-updates
  console.log green "Pushing ExoCom dependency updates...\n"
  run-command "git add -u && git commit -m 'update exocom dependencies' && git push"
  console.log!


function bump-version-number
  console.log green "Bumping version number...\n"
  run-command "npm version #{@level}"
  console.log!


function push-version-number
  console.log green "Pushing version number...\n"
  run-command 'git push'
  console.log!


function publish-to-npm
  console.log green "Publishing to npm...\n"
  run-command 'npm publish'
  console.log!


function push-exo-deploy-docker-image
  console.log green "Pushing exo-deploy image to DockerHub...\n"
  cd 'exo-deploy'
  run-command "docker build --no-cache -t originate/exo-deploy:#{@target-version} ."
  run-command "docker push originate/exo-deploy:#{@target-version}"
  cd '..'


function push-git-tags
  console.log green "Pushing git release tag...\n"
  run-command 'git push --tags'
  console.log!


function run-command command
  if exec(command).code > 0 then process.exit 1


function run-command-in-subdirs command
  for directory in SUBPROJECTS_TO_PUBLISH
    console.log "Running #{yellow command} in subproject #{cyan directory}"
    cd directory
    run-command command
    cd '..'
    console.log!


function get-target-version version, level
  target-version = semver.inc version, level
  unless target-version
    console.log "\n#{bold red 'Error:'} #{bold cyan level} #{red 'is not a valid version increment'}"
    display-help!
  target-version


function confirm-target-version done
  console.log "\nYou are about to bump #{green bold name} version #{cyan bold version} up to #{cyan bold @target-version}\n"
  question =
    type: 'list'
    name: 'continue'
    message: 'Are you sure?'
    choices: ['yes', 'no']
  inquirer.prompt([question]).then (answer) ->
    if answer.continue == 'no'
      console.log '\nAborting ...\n'
      process.exit!
    console.log!
    done!


function ensure-no-open-files
  open-files = exec "git status --porcelain", silent: yes
  if open-files.stdout then console.log red 'Please commit all files before releasing' ; process.exit 1


function ensure-on-master
  current-branch = exec "git rev-parse --abbrev-ref HEAD", silent: yes
  if current-branch.trim! isnt 'master' then console.log red 'You must be on the master branch to publish' ; process.exit 1


function ensure-in-root-dir
  if path.basename(process.cwd!) isnt 'exosphere'
    console.log red 'You must be in the root directory to publish' ; process.exit 1


function display-help
  console.log "\nUsage:\n\n  #{bold 'publish <patch|minor|major>'}\n"
  process.exit 1

main!
