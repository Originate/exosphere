// Generated by LiveScript 1.5.0
var fs, ref$, ApplicationDependency, globalExosphereDirectory, DockerHelper, Handlebars, yaml, path, Obj, map, union, os, DockerSetup;
fs = require('fs-extra');
ref$ = require('../../exosphere-shared'), ApplicationDependency = ref$.ApplicationDependency, globalExosphereDirectory = ref$.globalExosphereDirectory, DockerHelper = ref$.DockerHelper;
Handlebars = require('handlebars');
yaml = require('js-yaml');
path = require('path');
ref$ = require('prelude-ls'), Obj = ref$.Obj, map = ref$.map, union = ref$.union;
os = require('os');
DockerSetup = (function(){
  DockerSetup.displayName = 'DockerSetup';
  var prototype = DockerSetup.prototype, constructor = DockerSetup;
  function DockerSetup(arg$){
    this.appConfig = arg$.appConfig, this.role = arg$.role, this.logger = arg$.logger, this.serviceLocation = arg$.serviceLocation, this.dockerImage = arg$.dockerImage;
    this._getExternalServiceDockerConfig = bind$(this, '_getExternalServiceDockerConfig', prototype);
    this.getServiceDockerConfig = bind$(this, 'getServiceDockerConfig', prototype);
    if (this.serviceLocation) {
      this.serviceConfig = yaml.safeLoad(fs.readFileSync(path.join(process.cwd(), this.serviceLocation, 'service.yml'), 'utf8'));
    }
  }
  DockerSetup.prototype.getServiceDockerConfig = function(done){
    switch (false) {
    case !this.serviceConfig:
      return done(null, this._getServiceDockerConfig());
    default:
      return this._getExternalServiceDockerConfig(done);
    }
  };
  DockerSetup.prototype._getServiceDockerConfig = function(){
    var dockerConfig, ref$, i$, ref1$, len$, dependency;
    dockerConfig = {};
    dockerConfig[this.role] = Obj.compact({
      build: path.join('..', this.serviceLocation),
      container_name: this.role,
      command: this.serviceConfig.startup.command,
      ports: ((ref$ = this.serviceConfig.docker) != null ? ref$.ports : void 8) || undefined,
      links: this._getDockerLinks(),
      environment: this._getDockerEnvVars(),
      depends_on: this._getServiceDependencies()
    });
    for (i$ = 0, len$ = (ref1$ = this.serviceConfig.dependencies || []).length; i$ < len$; ++i$) {
      dependency = ref1$[i$];
      if (dependency.config) {
        dockerConfig[dependency.name + dependency.version] = this._getServiceDependencyDockerConfig(dependency.name, dependency.version, dependency.config);
      }
    }
    return dockerConfig;
  };
  DockerSetup.prototype._getDockerLinks = function(){
    var links, i$, ref$, len$, dependency;
    links = [];
    for (i$ = 0, len$ = (ref$ = this.serviceConfig.dependencies || []).length; i$ < len$; ++i$) {
      dependency = ref$[i$];
      links.push((dependency.name + dependency.version) + ":" + dependency.name);
    }
    if (links.length) {
      return links;
    } else {
      return undefined;
    }
  };
  DockerSetup.prototype._getDockerEnvVars = function(){
    var envVars, i$, ref$, len$, dependencyConfig, dependency, ref1$;
    envVars = {
      ROLE: this.role
    };
    for (i$ = 0, len$ = (ref$ = this.appConfig.dependencies).length; i$ < len$; ++i$) {
      dependencyConfig = ref$[i$];
      dependency = ApplicationDependency.build(dependencyConfig);
      envVars = (ref1$ = {}, import$(ref1$, envVars), import$(ref1$, dependency.getServiceEnvVariables()));
    }
    for (i$ = 0, len$ = (ref$ = this.serviceConfig.dependencies || []).length; i$ < len$; ++i$) {
      dependency = ref$[i$];
      envVars[dependency.name.toUpperCase()] = dependency.name;
    }
    return envVars;
  };
  DockerSetup.prototype._getServiceDependencies = function(){
    var dependencies, i$, ref$, len$, dependency;
    dependencies = [];
    for (i$ = 0, len$ = (ref$ = this.serviceConfig.dependencies || []).length; i$ < len$; ++i$) {
      dependency = ref$[i$];
      dependencies.push(dependency.name + "" + dependency.version);
    }
    return union(dependencies, this._getAppDependencies());
  };
  DockerSetup.prototype._getServiceDependencyDockerConfig = function(dependencyName, dependencyVersion, dependencyConfig){
    return Obj.compact({
      image: dependencyName + ":" + dependencyVersion,
      container_name: dependencyName + dependencyVersion,
      ports: dependencyConfig.ports,
      volumes: this._getRenderedVolumes(dependencyConfig.volumes, dependencyName)
    });
  };
  DockerSetup.prototype._getExternalServiceDockerConfig = function(done){
    var this$ = this;
    switch (false) {
    case !!this.dockerImage:
      done(new Error(red("No location or docker image listed for '" + this.role + "'")));
    }
    return DockerHelper.catFile({
      image: this.dockerImage,
      fileName: 'service.yml'
    }, function(err, externalServiceConfig){
      var dockerConfig, ref$;
      switch (false) {
      case !err:
        done(err);
      }
      this$.serviceConfig = yaml.safeLoad(externalServiceConfig);
      dockerConfig = {};
      dockerConfig[this$.role] = Obj.compact({
        image: this$.dockerImage,
        container_name: this$.role,
        ports: this$.serviceConfig.docker.ports,
        environment: (ref$ = {}, import$(ref$, this$.serviceConfig.docker.environment), import$(ref$, this$._getDockerEnvVars())),
        volumes: this$._getRenderedVolumes(this$.serviceConfig.docker.volumes, this$.role),
        depends_on: this$._getServiceDependencies()
      });
      return done(null, dockerConfig);
    });
  };
  DockerSetup.prototype._getRenderedVolumes = function(volumes, role){
    var dataPath;
    if (volumes) {
      dataPath = globalExosphereDirectory(this.appConfig.name, role);
      fs.ensureDirSync(dataPath);
      return map(function(volume){
        return Handlebars.compile(volume)({
          "EXO_DATA_PATH": dataPath
        });
      }, volumes);
    }
  };
  DockerSetup.prototype._getAppDependencies = function(){
    return map(function(dependencyConfig){
      return dependencyConfig.name + "" + dependencyConfig.version;
    }, this.appConfig.dependencies);
  };
  return DockerSetup;
}());
module.exports = DockerSetup;
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}